Directory structure:
└── indeutschland-lebenslauf/
    ├── README.md
    ├── app.py
    ├── flask_app.db
    ├── gitingest.txt
    ├── LICENSE
    ├── requirements.txt
    ├── summary_tree.txt
    ├── step0/
    │   ├── db.py
    │   ├── main.py
    │   └── templates/
    │       ├── add.html
    │       ├── edit.html
    │       ├── edit_tool.html
    │       ├── index.html
    │       └── tools.html
    ├── step01/
    │   ├── README_step_01.md
    │   ├── README_step_01_ar.md
    │   └── run.py
    ├── step02/
    │   ├── __init__.py
    │   ├── README_step_02.md
    │   ├── README_step_02_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── routes/
    │   │   └── main_routes.py
    │   └── templates/
    │       └── home.html
    ├── step03/
    │   ├── __init__.py
    │   ├── README_step_03.md
    │   ├── README_step_03_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   └── main_routes.py
    │   ├── templates/
    │   │   └── home.html
    │   └── tools/
    │       └── init_db.py
    ├── step04/
    │   ├── __init__.py
    │   ├── README_step_04.md
    │   ├── README_step_04_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   └── main_routes.py
    │   ├── templates/
    │   │   ├── home.html
    │   │   └── admin/
    │   │       └── sections.html
    │   └── tools/
    │       └── init_db.py
    ├── step05/
    │   ├── __init__.py
    │   ├── README_step_05.md
    │   ├── README_step_05_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   └── sections.html
    │   │   └── public/
    │   │       └── resume.html
    │   └── tools/
    │       └── init_db.py
    ├── step06/
    │   ├── __init__.py
    │   ├── README_step_06.md
    │   ├── README_step_06_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   └── sections.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step07/
    │   ├── __init__.py
    │   ├── README_step_07.md
    │   ├── README_step_07_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step08/
    │   ├── __init__.py
    │   ├── README_step_08.md
    │   ├── README_step_08_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step09/
    │   ├── __init__.py
    │   ├── README_step_09.md
    │   ├── README_step_09_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step10/
    │   ├── __init__.py
    │   ├── README_step_10.md
    │   ├── README_step_10_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step11/
    │   ├── __init__.py
    │   ├── babel.cfg
    │   ├── extensions.py
    │   ├── i18n_runtime.py
    │   ├── i18n_translate.py
    │   ├── README_step_11.md
    │   ├── README_step_11_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   ├── __init__.py
    │   │   └── settings.py
    │   ├── logic/
    │   │   ├── __init__.py
    │   │   └── builder.py
    │   ├── models/
    │   │   ├── __init__.py
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── __init__.py
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   ├── tools/
    │   │   └── init_db.py
    │   └── translations/
    │       ├── ar/
    │       │   └── LC_MESSAGES/
    │       │       └── messages.po
    │       └── de/
    │           └── LC_MESSAGES/
    │               └── messages.po
    ├── step12/
    │   ├── __init__.py
    │   ├── babel.cfg
    │   ├── extensions.py
    │   ├── i18n_runtime.py
    │   ├── i18n_translate.py
    │   ├── README_step_12.md
    │   ├── README_step_12_ar.md
    │   ├── run.py
    │   ├── config/
    │   │   ├── __init__.py
    │   │   └── settings.py
    │   ├── logic/
    │   │   ├── __init__.py
    │   │   └── builder.py
    │   ├── models/
    │   │   ├── __init__.py
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── __init__.py
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── base.html.j2
    │   │   ├── home.html.j2
    │   │   ├── admin/
    │   │   │   ├── sections.html.j2
    │   │   │   └── settings.html.j2
    │   │   ├── partials/
    │   │   │   ├── footer.html.j2
    │   │   │   └── navbar.html.j2
    │   │   └── public/
    │   │       └── resume.html.j2
    │   ├── tools/
    │   │   └── init_db.py
    │   └── translations/
    │       ├── ar/
    │       │   └── LC_MESSAGES/
    │       │       └── messages.po
    │       └── de/
    │           └── LC_MESSAGES/
    │               └── messages.po
    └── step13/
        ├── __init__.py
        ├── babel.cfg
        ├── extensions.py
        ├── i18n_runtime.py
        ├── i18n_translate.py
        ├── run.py
        ├── config/
        │   ├── __init__.py
        │   └── settings.py
        ├── logic/
        │   ├── __init__.py
        │   └── builder.py
        ├── models/
        │   ├── __init__.py
        │   └── models.py
        ├── routes/
        │   ├── __init__.py
        │   ├── admin_routes.py
        │   ├── main_routes.py
        │   └── public_routes.py
        ├── static/
        │   └── css/
        │       └── resume.css
        ├── templates/
        │   ├── base.html.j2
        │   ├── home.html.j2
        │   ├── admin/
        │   │   ├── sections.html.j2
        │   │   └── settings.html.j2
        │   ├── partials/
        │   │   ├── footer.html.j2
        │   │   └── navbar.html.j2
        │   └── public/
        │       └── resume.html.j2
        ├── tools/
        │   └── init_db.py
        └── translations/
            ├── ar/
            │   └── LC_MESSAGES/
            │       └── messages.po
            └── de/
                └── LC_MESSAGES/
                    └── messages.po

================================================
FILE: README.md
================================================
# lebenslauf


================================================
FILE: app.py
================================================
import sqlite3

# الاتصال بقاعدة البيانات
conn = sqlite3.connect("flask_app.db")
cur = conn.cursor()

# تنفيذ الاستعلام مع الترتيب حسب التصنيف أولاً ثم اسم الوكيل
cur.execute("""
SELECT 
    attributes.id,
    attributes.name AS attribute_name,
    categories.name AS category_name
FROM 
    attributes
JOIN 
    categories
ON 
    attributes.category_id = categories.id
ORDER BY 
    category_name, attribute_name
""")

# جلب النتائج
results = cur.fetchall()

# طباعة رأس الجدول
print(f"{'ID':<4} {'Attribute':<30} {'Category'}")
print("-" * 60)

# طباعة النتائج
for id, attribute, category in results:
    print(f"{id:<4} {attribute:<30} {category}")

# إغلاق الاتصال
conn.close()



================================================
FILE: flask_app.db
================================================
[Non-text file]


================================================
FILE: gitingest.txt
================================================
Directory structure:
└── indeutschland-lebenslauf/
    ├── README.md
    ├── app.py
    ├── flask_app.db
    ├── LICENSE
    ├── requirements.txt
    ├── summary_tree.txt
    ├── step0/
    │   ├── db.py
    │   ├── main.py
    │   └── templates/
    │       ├── add.html
    │       ├── edit.html
    │       ├── edit_tool.html
    │       ├── index.html
    │       └── tools.html
    ├── step1/
    │   ├── README_step_01.md
    │   └── run.py
    ├── step10/
    │   ├── __init__.py
    │   ├── README_step_10.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step11/
    │   ├── __init__.py
    │   ├── babel.cfg
    │   ├── extensions.py
    │   ├── i18n_runtime.py
    │   ├── i18n_translate.py
    │   ├── README_step_11.md
    │   ├── run.py
    │   ├── config/
    │   │   ├── __init__.py
    │   │   └── settings.py
    │   ├── logic/
    │   │   ├── __init__.py
    │   │   └── builder.py
    │   ├── models/
    │   │   ├── __init__.py
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── __init__.py
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   ├── tools/
    │   │   └── init_db.py
    │   └── translations/
    │       ├── ar/
    │       │   └── LC_MESSAGES/
    │       │       └── messages.po
    │       └── de/
    │           └── LC_MESSAGES/
    │               └── messages.po
    ├── step2/
    │   ├── __init__.py
    │   ├── README_step_02.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── routes/
    │   │   └── main_routes.py
    │   └── templates/
    │       └── home.html
    ├── step3/
    │   ├── __init__.py
    │   ├── README_step_03.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   └── main_routes.py
    │   ├── templates/
    │   │   └── home.html
    │   └── tools/
    │       └── init_db.py
    ├── step4/
    │   ├── __init__.py
    │   ├── README_step_04.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   └── main_routes.py
    │   ├── templates/
    │   │   ├── home.html
    │   │   └── admin/
    │   │       └── sections.html
    │   └── tools/
    │       └── init_db.py
    ├── step5/
    │   ├── __init__.py
    │   ├── README_step_05.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   └── sections.html
    │   │   └── public/
    │   │       └── resume.html
    │   └── tools/
    │       └── init_db.py
    ├── step6/
    │   ├── __init__.py
    │   ├── README_step_06.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   └── sections.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step7/
    │   ├── __init__.py
    │   ├── README_step_07.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    ├── step8/
    │   ├── __init__.py
    │   ├── README_step_08.md
    │   ├── run.py
    │   ├── config/
    │   │   └── settings.py
    │   ├── logic/
    │   │   └── builder.py
    │   ├── models/
    │   │   └── models.py
    │   ├── routes/
    │   │   ├── admin_routes.py
    │   │   ├── main_routes.py
    │   │   └── public_routes.py
    │   ├── static/
    │   │   └── css/
    │   │       └── resume.css
    │   ├── templates/
    │   │   ├── home.html
    │   │   ├── admin/
    │   │   │   ├── sections.html
    │   │   │   └── settings.html
    │   │   └── public/
    │   │       └── resume.html.j2
    │   └── tools/
    │       └── init_db.py
    └── step9/
        ├── __init__.py
        ├── README_step_09.md
        ├── run.py
        ├── config/
        │   └── settings.py
        ├── logic/
        │   └── builder.py
        ├── models/
        │   └── models.py
        ├── routes/
        │   ├── admin_routes.py
        │   ├── main_routes.py
        │   └── public_routes.py
        ├── static/
        │   └── css/
        │       └── resume.css
        ├── templates/
        │   ├── home.html
        │   ├── admin/
        │   │   ├── sections.html
        │   │   └── settings.html
        │   └── public/
        │       └── resume.html.j2
        └── tools/
            └── init_db.py

================================================
FILE: README.md
================================================
# lebenslauf


================================================
FILE: app.py
================================================
import sqlite3

# الاتصال بقاعدة البيانات
conn = sqlite3.connect("flask_app.db")
cur = conn.cursor()

# تنفيذ الاستعلام مع الترتيب حسب التصنيف أولاً ثم اسم الوكيل
cur.execute("""
SELECT 
    attributes.id,
    attributes.name AS attribute_name,
    categories.name AS category_name
FROM 
    attributes
JOIN 
    categories
ON 
    attributes.category_id = categories.id
ORDER BY 
    category_name, attribute_name
""")

# جلب النتائج
results = cur.fetchall()

# طباعة رأس الجدول
print(f"{'ID':<4} {'Attribute':<30} {'Category'}")
print("-" * 60)

# طباعة النتائج
for id, attribute, category in results:
    print(f"{id:<4} {attribute:<30} {category}")

# إغلاق الاتصال
conn.close()



================================================
FILE: flask_app.db
================================================
[Non-text file]


================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2025 inDeutschland

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: requirements.txt
================================================
# step 1: Install Flask
flask
# step 3: Install Flask-SQLAlchemy
flask-sqlalchemy
# step 11: i18nitialize Flask-Babel
flask-babel==4.0.0
deep_translator





================================================
FILE: summary_tree.txt
================================================
📁 lebenslauf/
├── 📁 instance/
├── 📁 step0/
│   ├── 📁 templates/
│   │   ├── add.html
│   │   ├── edit.html
│   │   ├── edit_tool.html
│   │   ├── index.html
│   │   └── tools.html
│   ├── db.py
│   └── main.py
├── 📁 step1/
│   ├── README_step_01.md
│   └── run.py
├── 📁 step10/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_10.md
│   ├── __init__.py
│   └── run.py
├── 📁 step11/
│   ├── 📁 config/
│   │   ├── __init__.py
│   │   └── settings.py
│   ├── 📁 instance/
│   ├── 📁 logic/
│   │   ├── __init__.py
│   │   └── builder.py
│   ├── 📁 models/
│   │   ├── __init__.py
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── __init__.py
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── 📁 translations/
│   │   ├── 📁 ar/
│   │   │   └── 📁 LC_MESSAGES/
│   │   │       ├── messages.mo
│   │   │       └── messages.po
│   │   └── 📁 de/
│   │       └── 📁 LC_MESSAGES/
│   │           ├── messages.mo
│   │           └── messages.po
│   ├── __init__.py
│   ├── babel.cfg
│   ├── extensions.py
│   ├── i18n_runtime.py
│   ├── i18n_translate.py
│   └── run.py
├── 📁 step2/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 routes/
│   │   └── main_routes.py
│   ├── 📁 templates/
│   │   └── home.html
│   ├── README_step_02.md
│   ├── __init__.py
│   └── run.py
├── 📁 step3/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   └── main_routes.py
│   ├── 📁 templates/
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_03.md
│   ├── __init__.py
│   └── run.py
├── 📁 step4/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   └── main_routes.py
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   └── sections.html
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_04.md
│   ├── __init__.py
│   └── run.py
├── 📁 step5/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   └── sections.html
│   │   ├── 📁 public/
│   │   │   └── resume.html
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_05.md
│   ├── __init__.py
│   └── run.py
├── 📁 step6/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   └── sections.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_06.md
│   ├── __init__.py
│   └── run.py
├── 📁 step7/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_07.md
│   ├── __init__.py
│   └── run.py
├── 📁 step8/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_08.md
│   ├── __init__.py
│   └── run.py
├── 📁 step9/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_09.md
│   ├── __init__.py
│   └── run.py
├── .gitignore
├── LICENSE
├── README.md
├── app.py
├── flask_app.db
└── requirements.txt


================================================
FILE: step0/db.py
================================================
# db.py
import sqlite3
import inspect
import flask
from flask import Flask

DB_PATH = "flask_app.db"
REBUILD_DB = True  # ✅ يمكنك تعيينه إلى False لاحقًا إذا لم ترغب في حذف الجداول

external_tools = [
    "Flask", "request", "session", "redirect", "url_for", "render_template", "abort",
    "g", "current_app", "Blueprint", "make_response", "jsonify", "Response",
    "Config", "escape", "flash", "get_flashed_messages"
]

tool_categories = {
    "Flask": "Core",
    "request": "Request",
    "session": "Session",
    "redirect": "Routing",
    "url_for": "Routing",
    "render_template": "Templating",
    "abort": "Error Handling",
    "g": "Globals",
    "current_app": "App Context",
    "Blueprint": "Structure",
    "make_response": "Response",
    "jsonify": "Response",
    "Response": "Response",
    "Config": "Configuration",
    "escape": "Security",
    "flash": "Messages",
    "get_flashed_messages": "Messages"
}

tool_examples = {
    "request": "name = request.args.get('name')",
    "session": "session['user'] = 'admin'",
    "redirect": "return redirect(url_for('home'))",
    "url_for": "url_for('index')",
    "render_template": "return render_template('index.html')",
    "abort": "abort(404)",
    "g": "g.user = current_user",
    "current_app": "current_app.logger.info('Hello')",
    "Blueprint": "bp = Blueprint('admin', __name__, url_prefix='/admin')",
    "make_response": "resp = make_response('Hello')",
    "jsonify": "return jsonify({'message': 'ok'})",
    "Response": "resp = Response('Hello', status=200)",
    "Config": "app.config['DEBUG'] = True",
    "escape": "escape('<script>')",
    "flash": "flash('Welcome!')",
    "get_flashed_messages": "get_flashed_messages()"
}

app = Flask(__name__)
filtered_attributes = [attr for attr in dir(app) if not attr.startswith("__")]

def guess_category(attr):
    name = attr.lower()
    if 'route' in name or 'url' in name or 'view' in name:
        return 'Routing'
    elif 'run' in name or 'wsgi' in name or 'client' in name:
        return 'Server'
    elif 'config' in name or 'secret' in name:
        return 'Configuration'
    elif 'jinja' in name or 'template' in name:
        return 'Templates'
    elif 'request' in name or 'response' in name or 'teardown' in name or 'context' in name:
        return 'Request Lifecycle'
    elif 'static' in name:
        return 'Static Files'
    elif 'session' in name:
        return 'Sessions'
    elif 'error' in name or 'exception' in name:
        return 'Error Handling'
    elif 'log' in name:
        return 'Logging'
    elif 'cli' in name or 'shell' in name:
        return 'CLI Tools'
    else:
        return 'Other'

def manual_example(attr):
    name = attr.lower()
    examples = {
        "run": "app.run(debug=True)",
        "route": "@app.route('/')\ndef home():\n    return 'Hello, World!'",
        "config": "app.config['DEBUG'] = True",
        "logger": "app.logger.info('Server started')",
        "get": "@app.get('/items')\ndef get_items():\n    return 'Items'",
        "post": "@app.post('/submit')\ndef submit():\n    return 'Submitted'",
        "template_folder": "app = Flask(__name__, template_folder='my_templates')",
        "static_folder": "app = Flask(__name__, static_folder='assets')",
        "before_request": "@app.before_request\ndef before():\n    print('Before request')",
        "after_request": "@app.after_request\ndef after(response):\n    print('After request')\n    return response",
        "errorhandler": "@app.errorhandler(404)\ndef not_found(e):\n    return 'Not Found', 404",
        "test_client": "client = app.test_client()\nresponse = client.get('/')",
        "url_for": "url_for('home')",
        "add_url_rule": "app.add_url_rule('/', 'index', lambda: 'Index')"
    }
    return examples.get(name)

def generate_example(attr):
    example = manual_example(attr)
    is_manual = 1 if example else 0
    if not example:
        example = f"# Placeholder example\napp.{attr}(...)"
    return example, is_manual

conn = sqlite3.connect(DB_PATH)
cur = conn.cursor()
cur.execute("PRAGMA foreign_keys = ON;")

if REBUILD_DB:
    cur.executescript("""
    DROP TABLE IF EXISTS examples;
    DROP TABLE IF EXISTS attributes;
    DROP TABLE IF EXISTS categories;
    DROP TABLE IF EXISTS external_tools;
    """)

cur.executescript("""
CREATE TABLE IF NOT EXISTS categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS attributes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    category_id INTEGER,
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

CREATE TABLE IF NOT EXISTS examples (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    attribute_id INTEGER NOT NULL,
    example TEXT NOT NULL,
    is_manual INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (attribute_id) REFERENCES attributes(id)
);

CREATE TABLE IF NOT EXISTS external_tools (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    category TEXT,
    category_id INTEGER,
    example TEXT,
    is_manual INTEGER DEFAULT 0,
    type TEXT,
    FOREIGN KEY (category_id) REFERENCES categories(id)
);
""")

all_categories = set(guess_category(attr) for attr in filtered_attributes)
all_categories.update(tool_categories.values())

category_id_map = {}
for category in sorted(all_categories):
    cur.execute("INSERT OR IGNORE INTO categories (name) VALUES (?)", (category,))
    cur.execute("SELECT id FROM categories WHERE name = ?", (category,))
    category_id_map[category] = cur.fetchone()[0]
conn.commit()

for attr in filtered_attributes:
    category = guess_category(attr)
    category_id = category_id_map[category]
    cur.execute("INSERT INTO attributes (name, category_id) VALUES (?, ?)", (attr, category_id))
    attr_id = cur.lastrowid
    example, is_manual = generate_example(attr)
    cur.execute("INSERT INTO examples (attribute_id, example, is_manual) VALUES (?, ?, ?)", (attr_id, example, is_manual))
conn.commit()

# --- إدخال أدوات Flask الخارجية (تنفيذ نهائي بعد بناء كل شيء) ---
for name in external_tools:
    try:
        obj = getattr(flask, name)
    except AttributeError:
        obj = globals().get(name) or flask.__dict__.get(name)

    if obj is None:
        type_ = 'unresolved'
    elif inspect.isclass(obj):
        type_ = 'class'
    elif inspect.isfunction(obj):
        type_ = 'function'
    elif inspect.ismethod(obj):
        type_ = 'method'
    elif inspect.isbuiltin(obj):
        type_ = 'builtin'
    elif inspect.ismodule(obj):
        type_ = 'module'
    else:
        type_ = 'other'

    category = tool_categories.get(name, "Uncategorized")
    example = tool_examples.get(name, f"# No example yet for {name}")
    is_manual = 1 if name in tool_examples else 0

    category_id = category_id_map.get(category)
    if category_id is None:
        print(f"❌ تصنيف غير موجود: {category} — تخطٍ")
        continue

    print(f"✅ إدراج: {name} | التصنيف: {category} | النوع: {type_} | ID: {category_id}")
    cur.execute("""
        INSERT INTO external_tools (name, category, example, is_manual, type, category_id)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (name, category, example, is_manual, type_, category_id))
conn.commit()

cur.execute("SELECT COUNT(*) FROM external_tools")
print(f"\n📊 عدد الأدوات المُدخلة في external_tools: {cur.fetchone()[0]}")
cur.execute("SELECT COUNT(*) FROM attributes")
print(f"📊 عدد وكلاء app المُدخلة: {cur.fetchone()[0]}")

conn.close()
print("\n✅ تم بناء قاعدة البيانات بنجاح.")



================================================
FILE: step0/main.py
================================================
import os
from flask import Flask, render_template, request, redirect, url_for
import sqlite3

# مسار قاعدة البيانات من المجلد الأعلى
DB = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'flask_app.db'))

app = Flask(__name__)

def get_db_connection():
    conn = sqlite3.connect(DB)
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    conn = get_db_connection()
    q = request.args.get('q', '').strip()
    if q:
        rows = conn.execute("""
            SELECT a.name AS attribute, e.example, e.is_manual, e.id
            FROM attributes a
            JOIN examples e ON a.id = e.attribute_id
            WHERE a.name LIKE ?
            ORDER BY e.is_manual DESC, a.name
        """, (f'%{q}%',)).fetchall()
    else:
        rows = conn.execute("""
            SELECT a.name AS attribute, e.example, e.is_manual, e.id
            FROM attributes a
            JOIN examples e ON a.id = e.attribute_id
            ORDER BY a.name
        """).fetchall()
    conn.close()
    return render_template('index.html', examples=rows, q=q)

@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit(id):
    conn = get_db_connection()
    if request.method == 'POST':
        new_example = request.form['example']
        conn.execute("UPDATE examples SET example = ?, is_manual = 1 WHERE id = ?", (new_example, id))
        conn.commit()
        conn.close()
        return redirect(url_for('index'))
    example = conn.execute("SELECT a.name AS attribute, e.example FROM examples e JOIN attributes a ON a.id = e.attribute_id WHERE e.id = ?", (id,)).fetchone()
    conn.close()
    return render_template('edit.html', example=example, id=id)

@app.route('/tools')
def tools():
    conn = get_db_connection()
    q = request.args.get('q', '').strip()
    if q:
        rows = conn.execute("""
            SELECT et.name, et.type, et.example, c.name as category, et.id
            FROM external_tools et
            LEFT JOIN categories c ON et.category_id = c.id
            WHERE et.name LIKE ?
            ORDER BY et.name
        """, (f'%{q}%',)).fetchall()
    else:
        rows = conn.execute("""
            SELECT et.name, et.type, et.example, c.name as category, et.id
            FROM external_tools et
            LEFT JOIN categories c ON et.category_id = c.id
            ORDER BY et.name
        """).fetchall()
    conn.close()
    return render_template('tools.html', tools=rows, q=q)

@app.route('/tools/edit/<int:id>', methods=['GET', 'POST'])
def edit_tool(id):
    conn = get_db_connection()
    if request.method == 'POST':
        new_example = request.form['example']
        conn.execute("UPDATE external_tools SET example = ?, is_manual = 1 WHERE id = ?", (new_example, id))
        conn.commit()
        conn.close()
        return redirect(url_for('tools'))
    tool = conn.execute("""
        SELECT et.name, et.type, et.example, c.name as category
        FROM external_tools et
        LEFT JOIN categories c ON et.category_id = c.id
        WHERE et.id = ?
    """, (id,)).fetchone()
    conn.close()
    return render_template('edit_tool.html', tool=tool, id=id)

@app.route('/add', methods=['GET', 'POST'])
def add_example():
    conn = get_db_connection()
    if request.method == 'POST':
        attribute_id = request.form['attribute_id']
        example = request.form['example']
        conn.execute("INSERT INTO examples (attribute_id, example, is_manual) VALUES (?, ?, 1)",
                     (attribute_id, example))
        conn.commit()
        conn.close()
        return redirect(url_for('index'))
    attributes = conn.execute("SELECT id, name FROM attributes ORDER BY name").fetchall()
    conn.close()
    return render_template('add.html', attributes=attributes)

app.run(debug=True)



================================================
FILE: step0/templates/add.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Add Example</title>
</head>
<body>
    <h1>Add New Example</h1>
    <form method="POST">
        <label for="attribute_id">Attribute:</label>
        <select name="attribute_id" required>
            {% for attr in attributes %}
                <option value="{{ attr.id }}">{{ attr.name }}</option>
            {% endfor %}
        </select><br><br>
        <label for="example">Example:</label><br>
        <textarea name="example" rows="5" cols="60" required></textarea><br><br>
        <input type="submit" value="Add Example">
    </form>
    <p><a href="{{ url_for('index') }}">Back to Home</a></p>
</body>
</html>


================================================
FILE: step0/templates/edit.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Edit Example</title>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.js"></script>
    <style>
        body { font-family: Arial; margin: 40px; background: #f9f9f9; }
        textarea { width: 100%; height: 200px; padding: 10px; font-family: monospace; }
        input[type="submit"] { padding: 10px 20px; margin-top: 10px; background: green; color: white; border: none; }
        pre { background: #f0f0f0; padding: 10px; border-radius: 5px; }
        h2, h3 { color: #333; }
    </style>
</head>
<body>
    <h2>Edit Example for: {{ example['attribute'] }}</h2>
    <form method="post">
        <textarea name="example">{{ example['example'] }}</textarea><br>
        <input type="submit" value="Save">
    </form>

    <h3>Preview:</h3>
    <pre><code class="language-python">{{ example['example'] }}</code></pre>

    <p><a href="{{ url_for('index') }}">← Back</a></p>
</body>
</html>



================================================
FILE: step0/templates/edit_tool.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Edit Tool Example</title>
    <style>
        body { font-family: Arial; margin: 40px; background: #f9f9f9; }
        textarea { width: 100%; height: 200px; font-family: monospace; padding: 10px; }
        input[type="submit"] { margin-top: 10px; padding: 10px 20px; }
        a { text-decoration: none; color: #007BFF; }
    </style>
</head>
<body>
    <h1>Edit Example: {{ tool.name }}</h1>
    <p><strong>Type:</strong> {{ tool.type }} | <strong>Category:</strong> {{ tool.category or 'Uncategorized' }}</p>
    <form method="post">
        <textarea name="example">{{ tool.example }}</textarea><br>
        <input type="submit" value="💾 Save Example">
    </form>
    <p><a href="{{ url_for('tools') }}">⬅ Back to Tools</a></p>
</body>
</html>



================================================
FILE: step0/templates/index.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Flask Attribute Examples</title>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.js"></script>
    <style>
        body { font-family: Arial; margin: 40px; background: #f4f4f4; }
        input[type="text"] { padding: 8px; width: 300px; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; background: white; }
        th, td { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; vertical-align: top; }
        th { background-color: #eee; }
        .manual { color: green; font-weight: bold; }
        .auto { color: #999; }
        a.button { text-decoration: none; padding: 6px 12px; background: #007BFF; color: white; border-radius: 4px; }
        pre { background: #f0f0f0; padding: 10px; border-radius: 5px; position: relative; }
        button.copy-btn {
            position: absolute;
            top: 5px;
            right: 10px;
            padding: 3px 8px;
            background: #007BFF;
            color: white;
            border: none;
            font-size: 12px;
            border-radius: 3px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Flask Attribute Examples</h1>
    <form method="get" action="/">
        <input type="text" name="q" value="{{ q }}" placeholder="Search attribute...">
        <input type="submit" value="Search">
    </form>
    <p>
        <a href="{{ url_for('add_example') }}" class="button">➕ Add New Example</a>
        <a href="{{ url_for('tools') }}" class="button">🧰 View External Tools</a>
    </p>

    <table>
        <tr><th>Attribute</th><th>Example</th><th>Status</th><th>Actions</th></tr>
        {% for row in examples %}
        <tr>
            <td>{{ row['attribute'] }}</td>
            <td>
                <pre>
                    <button class="copy-btn" onclick="copyCode(this)">Copy</button>
                    <code class="language-python">{{ row['example'] }}</code>
                </pre>
            </td>
            <td class="{{ 'manual' if row['is_manual'] else 'auto' }}">{{ 'Manual' if row['is_manual'] else 'Auto' }}</td>
            <td><a href="{{ url_for('edit', id=row['id']) }}" class="button">Edit</a></td>
        </tr>
        {% endfor %}
    </table>

    <script>
        function copyCode(button) {
            const codeBlock = button.nextElementSibling;
            const text = codeBlock.innerText;
            navigator.clipboard.writeText(text).then(() => {
                button.innerText = "✅ Copied!";
                setTimeout(() => { button.innerText = "Copy"; }, 1500);
            });
        }
    </script>
</body>
</html>



================================================
FILE: step0/templates/tools.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Flask External Tools</title>
    <style>
        body { font-family: Arial; margin: 40px; background: #f4f4f4; }
        input[type="text"] { padding: 8px; width: 300px; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; background: white; }
        th, td { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; }
        th { background-color: #eee; }
        .manual { color: green; font-weight: bold; }
        .auto { color: #999; }
        a.button { text-decoration: none; padding: 6px 12px; background: #007BFF; color: white; border-radius: 4px; }
    </style>
</head>
<body>
    <h1>Flask External Tools</h1>
    <form method="get" action="/tools">
        <input type="text" name="q" value="{{ q }}" placeholder="Search tool...">
        <input type="submit" value="Search">
    </form>
    <table>
        <tr><th>Name</th><th>Type</th><th>Category</th><th>Example</th><th>Status</th><th>Actions</th></tr>
        {% for row in tools %}
        <tr>
            <td>{{ row['name'] }}</td>
            <td>{{ row['type'] }}</td>
            <td>{{ row['category'] or 'Uncategorized' }}</td>
            <td><pre>{{ row['example'] }}</pre></td>
            <td class="{{ 'manual' if row['is_manual'] else 'auto' }}">{{ 'Manual' if row['is_manual'] else 'Auto' }}</td>
            <td><a href="{{ url_for('edit_tool', id=row['id']) }}" class="button">Edit</a></td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>



================================================
FILE: step1/README_step_01.md
================================================
# Schritt 1 – Einfaches Flask-Projekt starten (Port 4050)

## 🎯 Ziel
Ein minimales Flask-Projekt starten, das auf dem Port `4050` läuft und eine Willkommensnachricht anzeigt.

---

## 🧱 Struktur

```
lebenslauf/
└── run.py
```

---

## 🧪 Inhalt von `run.py`

```python
from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "Lebenslauf Projekt gestartet erfolgreich!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4050, debug=True)
```

---

## ▶️ Ausführen

```bash
pip install flask
python run.py
```

Dann im Browser öffnen:

```
http://localhost:4050
```

---

## ✅ Ergebnis
Im Browser sollte folgende Nachricht erscheinen:

```
Lebenslauf Projekt gestartet erfolgreich!
```


================================================
FILE: step1/run.py
================================================
from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "Lebenslauf Projekt gestartet erfolgreich!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40501, debug=True)



================================================
FILE: step10/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step10/README_step_10.md
================================================
# ✅ Schritt 10 – "Speichern + Vorschau"-Button (Live Preview Button)

In diesem Schritt wurde ein zusätzlicher Button integriert, um die aktuelle CSS-Konfiguration zu speichern **und gleichzeitig eine Vorschau der Änderungen anzuzeigen**.

## 🔧 Änderungen im Template (`settings.html`)
Ein neuer Button wurde eingefügt:
```html
<button type="submit" name="action" value="save_and_preview">💾 Speichern + Vorschau anzeigen</button>
```

## 🧠 Logik im Python-Code (`admin_routes.py`)
Im POST-Abschnitt wurde geprüft, ob der Name des Buttons `"save_and_preview"` ist:

```python
if request.form.get("action") == "save_and_preview":
    return redirect(url_for("public.resume"))
```

Dadurch wird der Benutzer nach dem Speichern automatisch auf die Seite `/resume` weitergeleitet, um die neue Darstellung live zu sehen.

## ✅ Vorteil:
- Bessere Benutzererfahrung für Administratoren.
- Spart Zeit beim Anpassen und Testen des Designs.


================================================
FILE: step10/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40510)



================================================
FILE: step10/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step10/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step10/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step10/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            action = request.form.get("action")
            if action == "save_and_preview":
                return redirect(url_for("public.resume"))
            return redirect(url_for("admin.manage_settings"))


        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step10/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step10/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step10/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step10/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step10/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step10/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
<h2>🔍 Live-Vorschau</h2>

<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">Beispiel-Titel</h2>
    <p id="preview-paragraph">Dies ist ein Beispielabschnitt mit Beispielinhalt für die Vorschau.</p>
</div>

    <!-- section_title_css -->
    <h3>section_title_css</h3>

    <label>📏 Font Size:</label>
    <select name="section_title_css_font_size">
        {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
            <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

    <br><br>

    <label>🔠 Font Weight:</label>
    <select name="section_title_css_weight">
        {% for w in ["normal", "bold", "lighter"] %}
            <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
        {% endfor %}
    </select>

    <hr>

    <!-- paragraph_css -->
    <h3>paragraph_css</h3>

    <label>📏 Font Size:</label>
    <select name="paragraph_css_font_size">
        {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
            <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

    <hr>

    <!-- باقي الإعدادات -->
    {% for setting in settings %}
        {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endif %}
    {% endfor %}


    <button type="submit" name="action" value="save">💾 Änderungen speichern</button>
    <button type="submit" name="action" value="save_and_preview">💾 Speichern + Vorschau anzeigen</button>


    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>


================================================
FILE: step10/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step10/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step11/__init__.py
================================================
from flask import Flask
from .models.models import db
from .routes.admin_routes import admin_bp
from .routes.public_routes import public_bp
from .routes.main_routes import main_bp
from .extensions import babel  # هذا يجب أن يأتي بعد Flask
from .i18n_runtime import init_i18n
import os
from flask_babel import get_locale
from flask_babel import _


def create_app():
    app = Flask(__name__)
    app.config.from_object("step11.config.settings.Config")
    app.config['LANGUAGES'] = ['de', 'en', 'ar']
    app.debug = True

    import logging
    logging.basicConfig(level=logging.DEBUG)
    app.logger.setLevel(logging.DEBUG)

    db.init_app(app)

    # ✅ التهيئة اليدوية للمسار
    translations_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'translations'))
    app.config['BABEL_TRANSLATION_DIRECTORIES'] = translations_path
    babel.init_app(app)

    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    init_i18n(app)

    @app.before_request
    def log_locale_info():
        print("🌐 Requested locale:", get_locale())
        print("📦 Babel directory:", app.config.get('BABEL_TRANSLATION_DIRECTORIES'))

    return app



================================================
FILE: step11/babel.cfg
================================================
[python: **.py]
[jinja2: **/templates/**.html]
extensions=jinja2.ext.do

ignore_dirs = venv



================================================
FILE: step11/extensions.py
================================================
# step11/extensions.py
from flask_babel import Babel

# ✅ أنشئ الكائن بدون باراميترات
babel = Babel()



================================================
FILE: step11/i18n_runtime.py
================================================
from flask import request
from flask_babel import gettext
from .extensions import babel

# ✅ دالة مستقلة يمكن استيرادها
def get_locale():
    lang = request.args.get("lang")
    print("📥 lang param:", lang)
    if lang in ['de', 'en', 'ar']:
        return lang
    return request.accept_languages.best_match(['de', 'en', 'ar'])

def init_i18n(app):
    # ✅ اربطها هنا
    babel.locale_selector_func = get_locale

    @app.context_processor
    def inject_get_locale():
        return dict(get_locale=get_locale)

    @app.context_processor
    def inject_translation():
        return dict(gettext=gettext)



================================================
FILE: step11/i18n_translate.py
================================================
import os
import re
import subprocess
from pathlib import Path
from flask import request
from deep_translator import GoogleTranslator
from .extensions import babel




# ----------- إعدادات المسارات ----------
STEP_DIR = Path(__file__).resolve().parent
BABEL_CFG = os.path.join(STEP_DIR, "babel.cfg")
OUTPUT_DIR = STEP_DIR / "translations"
POT_FILE = STEP_DIR / "messages.pot"
LANGUAGES = ["ar", "de"]

# ----------------------------------------


def fix_placeholders(msgid, translated):
    patterns = [
        re.compile(r"%\([^)]+\)s"),    # مثل %(name)s
        re.compile(r"\{[^}]+\}")       # مثل {value}
    ]
    for pattern in patterns:
        placeholders = pattern.findall(msgid)
        for ph in placeholders:
            corrupted_regex = re.compile(rf"%\s*\(\s*{re.escape(ph[2:-2])}\s*\)\s*s", re.IGNORECASE)
            translated = corrupted_regex.sub('', translated)
            if ph not in translated:
                print(f"⚠️ Missing placeholder {ph} in translation → fixing.")
                translated = translated.strip()
                if not translated.endswith(ph):
                    translated += f" {ph}"
    return translated


def read_pot_file(path):
    return path.read_text(encoding="utf-8").splitlines()


def init_translators(langs):
    return {lang: GoogleTranslator(source='en', target=lang) for lang in langs}


def add_po_header(lines, lang):
    header = [
        'msgid ""',
        'msgstr ""',
        '"Content-Type: text/plain; charset=UTF-8\\n"',
        f'"Language: {lang}\\n"',
        ""
    ]
    return header + lines


def is_english(text):
    return re.search(r'[a-zA-Z]', text) and not re.search(r'[ء-ي]', text)

def translate_lines(lines, translators):
    msgid = None
    translated_content = {lang: [] for lang in translators}

    for line in lines:
        if 'fuzzy' in line:
            continue
        if line.startswith('msgid '):
            msgid_raw = line[6:].strip().strip('"')
            if not is_english(msgid_raw):
                msgid = None
                for lang in translators:
                    translated_content[lang].append(line)
                    translated_content[lang].append('msgstr ""')
                continue
            msgid = msgid_raw
            msgid = line[6:].strip().strip('"')
            for lang in translators:
                translated_content[lang].append(line)
        elif line.strip() == 'msgstr ""' and msgid:
            for lang, translator in translators.items():
                try:
                    translated = translator.translate(msgid)
                    if not translated.strip():
                        print(f"Warning [{lang}] Empty translation for: {msgid}")
                    translated = fix_placeholders(msgid, translated)
                    translated_content[lang].append(f'msgstr "{translated}"')
                    print(f"Translated [{lang}] {msgid} → {translated}")
                except Exception as e:
                    translated_content[lang].append('msgstr ""')
                    print(f"Error [{lang}] translating '{msgid}': {e}")
            msgid = None
        else:
            for lang in translators:
                translated_content[lang].append(line)
    return translated_content


def save_translations(translated_content, base_output_dir):
    for lang, lines in translated_content.items():
        lines = add_po_header(lines, lang)
        path = Path(base_output_dir) / lang / "LC_MESSAGES" / "messages.po"
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text("\n".join(lines), encoding="utf-8")
        print(f"Saved [{lang}] to {path}")


def generate_pot_file():
    print("Extracting phrases to .pot file ...")
    subprocess.run(["pybabel", "extract", "-F", BABEL_CFG, "-o", POT_FILE, STEP_DIR], check=True)


def init_po_files(languages):
    for lang in languages:
        po_path = Path(OUTPUT_DIR) / lang / "LC_MESSAGES" / "messages.po"
        if not po_path.exists():
            print(f"Initializing file for [{lang}] ...")
            subprocess.run(["pybabel", "init", "-i", POT_FILE, "-d", OUTPUT_DIR, "-l", lang], check=True)
        else:
            print(f"Translation file already exists for [{lang}]")


def compile_translations():
    try:
        subprocess.run(["pybabel", "compile", "-d", OUTPUT_DIR], check=True)
        print("✅ Compiled translations to .mo files.")
    except subprocess.CalledProcessError as e:
        print("❌ Error compiling .mo files:", e)


def main():
    generate_pot_file()
    init_po_files(LANGUAGES)

    if not Path(POT_FILE).exists():
        print(f"{POT_FILE} not found after extraction.")
        return

    lines = read_pot_file(Path(POT_FILE))
    translators = init_translators(LANGUAGES)
    translated_content = translate_lines(lines, translators)
    save_translations(translated_content, OUTPUT_DIR)
    compile_translations()

    if Path(POT_FILE).exists():
        Path(POT_FILE).unlink()
        print("🧹 Temporary messages.pot file deleted.")



if __name__ == "__main__":
    main()



================================================
FILE: step11/README_step_11.md
================================================
# 🧩 Schritt 11 – Internationalisierung (i18n) + Dynamische Styles

Dies ist der elfte Schritt des Projekts **lebenslauf**, in dem wir die mehrsprachige Unterstützung (i18n) sowie dynamische CSS-Stile erfolgreich integriert haben.

---

## ✅ Funktionen in diesem Schritt

### 🌍 Mehrsprachigkeit (i18n)
- Unterstützung für **Deutsch 🇩🇪**, **Englisch 🇬🇧**, **Arabisch 🇸🇦**
- Wechsel der Sprache über URL-Parameter: `?lang=de`, `?lang=en`, `?lang=ar`
- Automatische Fallback-Sprache basierend auf `Accept-Language`
- Integration von Flask-Babel 4.0
- Verwendung von `force_locale()` zur erzwungenen Sprachumschaltung
- Übersetzbare Templates mit `gettext`, `_()` und `{{ _('Text') }}`

### 🎨 Dynamische CSS-Stile
- CSS-Konfigurationen (`section_title_css`, `paragraph_css`) aus der Datenbank
- Live-Vorschau in `settings.html` (Adminbereich)
- Visual CSS Editing via Input-Felder (z. B. Font Size, Color, Weight)

---

## 🛠️ Struktur

```bash
step11/
├── config/
├── logic/
├── models/
├── routes/
│   ├── admin_routes.py
│   ├── main_routes.py   # enthält force_locale + gettext
│   └── public_routes.py
├── static/css/resume.css
├── templates/
│   ├── home.html
│   ├── admin/sections.html
│   └── admin/settings.html
├── translations/
│   ├── de/LC_MESSAGES/messages.po
│   ├── ar/LC_MESSAGES/messages.po
├── i18n_runtime.py
├── extensions.py
├── run.py
```

---

## 🚀 Schnellstart

```bash
# Virtuelle Umgebung aktivieren
.env\Scripts\Activate

# Flask starten
$env:FLASK_APP = "step11:create_app"
flask run
```

Dann öffne deinen Browser:

```
http://127.0.0.1:5000/?lang=de
```

---

## 📁 Übersetzungen bearbeiten

```bash
pybabel extract -F babel.cfg -o messages.pot .
pybabel update -i messages.pot -d translations -l ar
pybabel compile -d translations
```

---

## 🔮 Nächste Schritte (Empfohlen)

- [ ] Sprache in `session` speichern statt in `?lang=`
- [ ] Dropdown für Sprachauswahl in Navbar
- [ ] Vollständige Übersetzung von Adminseiten
- [ ] Live-Aktualisierung der CSS-Vorschau (JavaScript)

---

## 🧠 Autor
**TamerOnLine** – [github.com/TamerOnLine](https://github.com/TamerOnLine)


================================================
FILE: step11/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40511)



================================================
FILE: step11/config/__init__.py
================================================



================================================
FILE: step11/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step11/logic/__init__.py
================================================



================================================
FILE: step11/logic/builder.py
================================================
import json
from ..models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step11/models/__init__.py
================================================



================================================
FILE: step11/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step11/routes/__init__.py
================================================



================================================
FILE: step11/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from ..models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            action = request.form.get("action")
            if action == "save_and_preview":
                return redirect(url_for("public.resume"))
            return redirect(url_for("admin.manage_settings"))


        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step11/routes/main_routes.py
================================================
from flask import Blueprint, request, render_template
from flask_babel import _
from flask_babel import force_locale
from ..i18n_runtime import get_locale

main_bp = Blueprint("main", __name__)


@main_bp.route("/")
def home():
    lang = get_locale()
    with force_locale(lang):
        print("🌐 Forced locale:", lang)
        return render_template("home.html", test=_("Select language:"))



================================================
FILE: step11/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from ..models.models import Section
from ..logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step11/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step11/templates/home.html
================================================
<!DOCTYPE html>
<html lang="{{ get_locale() }}">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Resume Project') }}</title>
</head>
<body>
    <h1>✅ {{ _('Resume Project gestartet erfolgreich!') }}</h1>
    <p>{{ _('Welcome to your multilingual resume application.') }}</p>

    <p>🌐 Detected locale: {{ get_locale() }}</p>
    <p>🔁 Translated: {{ _('Select language:') }}</p>

    <hr>

    <p>{{ _('Select language:') }}</p>
    <ul>
        <li><a href="{{ url_for('main.home') }}?lang=de">🇩🇪 Deutsch</a></li>
        <li><a href="{{ url_for('main.home') }}?lang=en">🇬🇧 English</a></li>
        <li><a href="{{ url_for('main.home') }}?lang=ar">🇸🇦 العربية</a></li>
    </ul>
</body>
</html>



================================================
FILE: step11/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Manage Sections') }}</title>
</head>
<body>
    <h1>📝 {{ _('Edit Resume Sections') }}</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 {{ _('Save Changes') }}</button>
    </form>
</body>
</html>



================================================
FILE: step11/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Edit CSS Settings') }}</title>
</head>
<body>
    <h1>🎨 {{ _('Resume Style Settings') }}</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
        <h2>🔍 {{ _('Live Preview') }}</h2>

        <div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
            <h2 id="preview-title">{{ _('Example Title') }}</h2>
            <p id="preview-paragraph">{{ _('This is a sample section with example content.') }}</p>
        </div>

        <!-- section_title_css -->
        <h3>{{ _('section_title_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="section_title_css_font_size">
            {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
                <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

        <br><br>

        <label>🔠 {{ _('Font Weight') }}:</label>
        <select name="section_title_css_weight">
            {% for w in ["normal", "bold", "lighter"] %}
                <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
            {% endfor %}
        </select>

        <hr>

        <!-- paragraph_css -->
        <h3>{{ _('paragraph_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="paragraph_css_font_size">
            {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
                <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

        <hr>

        <!-- Other settings -->
        {% for setting in settings %}
            {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
                <h3>{{ _(setting.key) }}</h3>
                <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
                <hr>
            {% endif %}
        {% endfor %}

        <button type="submit" name="action" value="save">💾 {{ _('Save Changes') }}</button>
        <button type="submit" name="action" value="save_and_preview">💾 {{ _('Save & Show Preview') }}</button>

    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>



================================================
FILE: step11/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Resume') }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 {{ _('My Resume') }}</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ _(section.title) }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ _(section.content) }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step11/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step11/translations/ar/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: ar\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "حدد اللغة:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "استئناف المشروع"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "استئناف مشروع الجستارت erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "مرحبًا بك في تطبيق السيرة الذاتية متعددة اللغات."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "إدارة الأقسام"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "تحرير الأقسام السيرة الذاتية"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "حفظ التغييرات"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "تحرير إعدادات CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "استئناف إعدادات النمط"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "معاينة حية"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "مثال العنوان"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "هذا قسم عينة مع مثال محتوى."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "section_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "حجم الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "لون"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "وزن الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "الفقرة"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "معاينة حفظ وإظهار"



================================================
FILE: step11/translations/de/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: de\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "Sprache auswählen:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "Projekt wieder aufnehmen"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "Lebenslauf Projekt Gestartett Erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "Willkommen bei Ihrer mehrsprachigen Lebenslaufanwendung."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "Abschnitte verwalten"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "Lebenslaufabschnitte bearbeiten"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "Änderungen speichern"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "Bearbeiten Sie die CSS -Einstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "Lebenslauf -Stileinstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "Live -Vorschau"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "Beispieltitel"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "Dies ist ein Beispielabschnitt mit Beispielinhalt."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "Abschnitt_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "Schriftgröße"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "Farbe"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "Schriftgewicht"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "Abschnitt_CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "Vorschau speichern und anzeigen"



================================================
FILE: step2/__init__.py
================================================
# __init__.py

from flask import Flask

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    # تسجيل المسارات
    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app



================================================
FILE: step2/README_step_02.md
================================================
# Schritt 2 – Projektstruktur organisieren (Flat + Modular)

## 🎯 Ziel
Das Projekt in eine saubere, modulare Struktur organisieren, bereit für Erweiterung, Übersetzung und Admin-Panel.

---

## 🧱 Struktur nach dieser Phase

```
lebenslauf/
│
├── run.py                  # Einstiegspunkt
├── __init__.py             # App-Factory
│
├── config/
│   └── settings.py         # Flask-Konfiguration
│
├── routes/
│   └── main_routes.py      # Homepage-Routen
│
├── templates/
│   └── home.html           # HTML-Begrüßungsseite
│
├── static/
│   ├── css/
│   └── js/
```

---

## 📂 Dateien im Detail

### `config/settings.py`

```python
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    DEBUG = True
```

---

### `__init__.py`

```python
from flask import Flask

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app
```

---

### `run.py`

```python
from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4050)
```

---

### `routes/main_routes.py`

```python
from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")
```

---

### `templates/home.html`

```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>
```

---

## ▶️ Ausführen

```bash
python run.py
```

Dann im Browser öffnen:  
[http://localhost:4050](http://localhost:4050)

---

## ✅ Ergebnis
Eine HTML-Seite mit Begrüßung erscheint:

```
✅ Lebenslauf Projekt gestartet erfolgreich!
```


================================================
FILE: step2/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40502)



================================================
FILE: step2/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    DEBUG = True



================================================
FILE: step2/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step2/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step3/__init__.py
================================================
from flask import Flask
from models.models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app



================================================
FILE: step3/README_step_03.md
================================================
# Schritt 3 – Datenbank und Grundmodelle einrichten (SQLAlchemy)

## 🎯 Ziel
Einrichtung der SQLite-Datenbank mit SQLAlchemy und Definition der Grundtabellen:
- `Section`: Lebenslauf-Bereiche
- `Setting`: Formatierungseinstellungen

---

## 🧱 Neue Struktur

```
lebenslauf/
├── models/
│   └── models.py          # Datenbankmodelle
├── tools/
│   └── init_db.py         # Initialisierungsskript
├── config/
│   └── settings.py        # Datenbank-Konfiguration
├── __init__.py            # App-Factory mit DB-Integration
```

---

## 💾 Abhängigkeit installieren

```bash
pip install flask_sqlalchemy
```

---

## 🧪 Konfiguration in `config/settings.py`

```python
class Config:
    SECRET_KEY = 'dev_key'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True
```

---

## 🧩 Inhalt von `models/models.py`

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)
```

---

## 🔗 App-Integration in `__init__.py`

```python
from flask import Flask
from models.models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app
```

---

## 🛠️ Datenbank initialisieren – `tools/init_db.py`

```python
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app
from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")
```

---

## ▶️ Ausführen

```bash
python tools/init_db.py
```

Dann:

```bash
python run.py
```

Und im Browser öffnen:
[http://localhost:4050](http://localhost:4050)

---

## ✅ Ergebnis
- Datenbankdatei `lebenslauf.db` wurde erstellt.
- Grunddaten sind vorhanden.


================================================
FILE: step3/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40503)



================================================
FILE: step3/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step3/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step3/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step3/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step3/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step4/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)

    return app



================================================
FILE: step4/README_step_04.md
================================================
# Schritt 4 – Admin-Oberfläche für Lebenslauf-Abschnitte

## 🎯 Ziel
Erstellung einer Admin-Seite zum Bearbeiten und Speichern aller Lebenslauf-Abschnitte direkt aus der Datenbank.

---

## 🧱 Neue Struktur

```
lebenslauf/
├── routes/
│   └── admin_routes.py       # Admin-Routen
├── templates/
│   └── admin/
│       └── sections.html     # Admin-HTML-Seite zur Bearbeitung
```

---

## 📂 `routes/admin_routes.py`

```python
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)
```

---

## 🛠️ Registrierung im `__init__.py`

```python
from routes.admin_routes import admin_bp
app.register_blueprint(admin_bp)
```

---

## 🖥️ `templates/admin/sections.html`

```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>
```

---

## ▶️ Ausführen

```bash
python run.py
```

Im Browser öffnen:

```
http://localhost:4050/admin/sections
```

---

## ✅ Ergebnis

- Alle Abschnitte werden dynamisch geladen.
- Änderungen können direkt gespeichert werden.
- Volle Bearbeitbarkeit über das Admin-Panel.


================================================
FILE: step4/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40504)



================================================
FILE: step4/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step4/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step4/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



================================================
FILE: step4/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step4/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step4/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step4/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step5/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step5/README_step_05.md
================================================
# Schritt 5 – Öffentliche Lebenslauf-Seite anzeigen (`/resume`)

## 🎯 Ziel
Erstellung einer öffentlichen Seite zur Anzeige des vollständigen Lebenslaufs mit Daten aus der Datenbank.

---

## 🧱 Neue Struktur

```
lebenslauf/
├── routes/
│   └── public_routes.py         # Öffentliche Routen
├── templates/
│   └── public/
│       └── resume.html          # Anzeigevorlage für den Lebenslauf
```

---

## 📂 `routes/public_routes.py`

```python
from flask import Blueprint, render_template
from models.models import Section

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    return render_template("public/resume.html", sections=sections)
```

---

## 🛠️ Registrierung im `__init__.py`

```python
from routes.public_routes import public_bp
app.register_blueprint(public_bp)
```

---

## 🖥️ `templates/public/resume.html`

```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
        }
        h2 {
            border-bottom: 1px solid #ccc;
            margin-top: 40px;
            color: #333;
        }
        .section-content {
            white-space: pre-wrap;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2>{{ section.title }}</h2>
        <div class="section-content">{{ section.content }}</div>
    {% endfor %}
</body>
</html>
```

---

## ▶️ Ausführen

```bash
python run.py
```

Dann im Browser öffnen:

```
http://localhost:4050/resume
```

---

## ✅ Ergebnis

- Alle Abschnitte werden dynamisch dargestellt.
- Inhalt stammt direkt aus der SQLite-Datenbank.
- Die Seite ist einfach, sauber und bereit zur Formatierung.


================================================
FILE: step5/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40505)



================================================
FILE: step5/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step5/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step5/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



================================================
FILE: step5/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step5/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    return render_template("public/resume.html", sections=sections)



================================================
FILE: step5/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step5/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step5/templates/public/resume.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
        }
        h2 {
            border-bottom: 1px solid #ccc;
            margin-top: 40px;
            color: #333;
        }
        .section-content {
            white-space: pre-wrap;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2>{{ section.title }}</h2>
        <div class="section-content">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step5/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step6/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step6/README_step_06.md
================================================
# 📘 Schritt 6 – Dynamisches Styling & öffentliche Lebenslaufseite

## 🎯 Ziel  
Integration eines dynamischen CSS-Stylings basierend auf Daten aus der Datenbank, und Verbesserung der öffentlichen Lebenslaufseite `/resume`.

---

## ⚙️ Neue Funktionen

- 📄 Öffentliche Lebenslaufseite mit dynamisch gerenderten Abschnitten.
- 🎨 Dynamisches Styling über das `Setting`-Modell.
- 📁 Separates Stylesheet (`resume.css`) für globale Standard-Stile.
- 🧠 Unterstützung für individuelle Stildefinitionen je Bereich über die Datenbank.

---

## 📂 Neue/aktualisierte Dateien

```
step6/
├── logic/
│   └── builder.py                # Hilfsfunktion zum Laden von CSS-Einstellungen
├── static/
│   └── css/
│       └── resume.css            # Globales CSS für die Resume-Seite
├── templates/
│   └── public/
│       └── resume.html.j2        # Dynamisch formatierte Lebenslaufseite
├── routes/
│   └── public_routes.py          # Route für /resume mit dynamischem Styling
```

---

## 🧠 `get_css_setting` – Hilfsfunktion

```python
def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default
```

> Diese Funktion holt ein CSS-Objekt (z. B. `{'font-size': '18px', 'color': '#000'}`) und wandelt es in einen gültigen Style-String um.

---

## 🌐 `routes/public_routes.py`

```python
@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )
```

---

## 🖼️ `resume.html.j2`

```html
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>
    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
```

---

## 🎨 `resume.css`

```css
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}
.section-title {
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}
.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}
```

---

## 🛠️ Initialisierung der Datenbank

```bash
python tools/init_db.py
```

> Erstellt die Tabellen `Section` und `Setting` mit Startwerten.

---

## ▶️ Anwendung starten

```bash
python run.py
```

Dann öffnen:

```
http://localhost:40505/resume
```

---

## ✅ Ergebnis

- Lebenslauf-Abschnitte werden korrekt aus der Datenbank geladen.
- Formatierung ist dynamisch über Datenbank-Settings steuerbar.
- Seite ist bereit für erweitertes Layout, Druck-Ansicht, etc.


================================================
FILE: step6/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40506)



================================================
FILE: step6/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step6/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step6/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step6/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



================================================
FILE: step6/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step6/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step6/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step6/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step6/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step6/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step6/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step7/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step7/README_step_07.md
================================================
# 🛠️ Schritt 7 – Admin-Oberfläche für dynamische CSS-Einstellungen

## 🎯 Ziel
Erstellung einer Admin-Seite zur Bearbeitung der Lebenslauf-Stile direkt aus der Datenbank via `/admin/settings`.

---

## ⚙️ Neue Funktionen

- ✅ Neue Admin-Route zur Bearbeitung von CSS-Stileinstellungen.
- ✅ Speichern von Änderungen direkt in der Tabelle `Setting`.
- ✅ Sofortige Wirkung der Änderungen auf die öffentliche Lebenslaufseite `/resume`.
- ✅ Fehlerprüfung für ungültige JSON-Werte.

---

## 📂 Neue/aktualisierte Dateien

```
step7/
├── routes/
│   └── admin_routes.py        # Neue Route: /admin/settings
├── templates/
│   └── admin/
│       └── settings.html      # Formular zur Bearbeitung der CSS-Einstellungen
```

---

## 🌐 Neue Route: `/admin/settings`

```python
@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    if request.method == "POST":
        try:
            for key, value in request.form.items():
                import json
                json.loads(value.replace("'", '"'))
                setting = Setting.query.filter_by(key=key).first()
                if setting:
                    setting.value = value
            db.session.commit()
            return redirect(url_for("admin.manage_settings"))
        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    settings = Setting.query.all()
    return render_template("admin/settings.html", settings=settings, error=error)
```

---

## 🖼️ Template: `settings.html`

```html
{% if error %}
    <p style="color: red;">{{ error }}</p>
{% endif %}

<form method="POST">
    {% for setting in settings %}
        <h3>{{ setting.key }}</h3>
        <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
        <hr>
    {% endfor %}
    <button type="submit">💾 Änderungen speichern</button>
</form>
```

---

## ▶️ Testen

1. Starte die App:
```bash
python run.py
```

2. Besuche im Browser:
```
http://localhost:40505/admin/settings
```

3. Bearbeite z. B. den Wert:
```json
{"font-size": "20px", "color": "#444", "font-weight": "bold"}
```

---

## ✅ Ergebnis

- Admins können jetzt CSS-Einstellungen sicher und einfach verwalten.
- Fehlerhafte Eingaben werden erkannt und nicht gespeichert.
- Die Resume-Seite `/resume` reflektiert jede Änderung sofort.

---

## 🔜 Nächster Schritt (Schritt 8)

- Verbesserung der Oberfläche mit visuellen Eingabeelementen (Color Picker, Dropdowns, Vorschau).


================================================
FILE: step7/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40507)



================================================
FILE: step7/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step7/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step7/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step7/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    if request.method == "POST":
        try:
            for key, value in request.form.items():
                # نحاول تحويل القيمة إلى JSON أولًا للتحقق من صحتها
                import json
                json.loads(value.replace("'", '"'))  # محاولة قراءة التنسيق
                setting = Setting.query.filter_by(key=key).first()
                if setting:
                    setting.value = value
            db.session.commit()
            return redirect(url_for("admin.manage_settings"))
        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    settings = Setting.query.all()
    return render_template("admin/settings.html", settings=settings, error=error)




================================================
FILE: step7/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step7/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step7/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step7/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step7/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step7/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">
        {% for setting in settings %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step7/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step7/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step8/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step8/README_step_08.md
================================================
# 🎨 Schritt 8 – Visuelle Bearbeitung von CSS-Stilen in der Admin-Oberfläche

## 🎯 Ziel
Die bisherigen JSON-basierten CSS-Einstellungen werden nun über visuelle Bedienelemente (Dropdowns, Farbwähler) bearbeitet – ganz ohne manuelles JSON!

---

## ✅ Unterstützte visuelle Felder

| Einstellungsschlüssel     | Eingabefelder                         |
|---------------------------|----------------------------------------|
| section_title_css         | Font Size, Color, Font Weight         |
| paragraph_css             | Font Size, Color                      |
| body_font                 | Font Family (Dropdown)                |

---

## 📁 Geänderte Dateien

```
step8/
├── routes/
│   └── admin_routes.py        # Erweiterte Logik zum Parsen visueller Felder
├── templates/
│   └── admin/
│       └── settings.html      # Visuelle Eingabeelemente statt Textarea für JSON
```

---

## 🖼️ Beispiel: `section_title_css`

```html
<select name="section_title_css_font_size">...</select>
<input type="color" name="section_title_css_color">
<select name="section_title_css_weight">...</select>
```

---

## 🖼️ Beispiel: `paragraph_css`

```html
<select name="paragraph_css_font_size">...</select>
<input type="color" name="paragraph_css_color">
```

---

## 🖼️ Beispiel: `body_font`

```html
<select name="body_font">
  <option value="Arial, sans-serif">Arial</option>
  <option value="Verdana, sans-serif">Verdana</option>
  ...
</select>
```

---

## ⚙️ Verarbeitung in `admin_routes.py`

- POST: Werte werden aus einzelnen Feldern gesammelt und in JSON umgewandelt (bzw. direkt gespeichert).
- GET: Werte werden geparsed und als Datenobjekte an das Template übergeben.

---

## ▶️ Anwendung starten

```bash
python run.py
```

Dann besuchen:
```
http://localhost:40505/admin/settings
```

---

## ✅ Ergebnis

- Admins können alle Stile bequem visuell konfigurieren.
- Kein Risiko durch fehlerhaftes JSON.
- Änderungen wirken sich direkt auf die öffentliche Lebenslaufseite `/resume` aus.

---

## 🔜 Nächster Schritt

- Live-Vorschau beim Bearbeiten.
- Integration eines Reset-Buttons für Standardwerte.


================================================
FILE: step8/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40508)



================================================
FILE: step8/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step8/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step8/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step8/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            return redirect(url_for("admin.manage_settings"))

        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step8/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step8/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step8/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step8/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step8/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step8/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

    <!-- section_title_css -->
    <h3>section_title_css</h3>

    <label>📏 Font Size:</label>
    <select name="section_title_css_font_size">
        {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
            <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

    <br><br>

    <label>🔠 Font Weight:</label>
    <select name="section_title_css_weight">
        {% for w in ["normal", "bold", "lighter"] %}
            <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
        {% endfor %}
    </select>

    <hr>

    <!-- paragraph_css -->
    <h3>paragraph_css</h3>

    <label>📏 Font Size:</label>
    <select name="paragraph_css_font_size">
        {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
            <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

    <hr>

    <!-- باقي الإعدادات -->
    {% for setting in settings %}
        {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endif %}
    {% endfor %}

    <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step8/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step8/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step9/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step9/README_step_09.md
================================================

# Schritt 9 – Live-Vorschau der Lebenslauf-Stileinstellungen

## 🎯 Ziel
Integration einer **Live Preview**-Funktion, um Stiländerungen (CSS) direkt im Browser visuell zu testen, bevor sie gespeichert werden.

---

## 🆕 Struktur

```
templates/
└── admin/
    └── settings.html               # Mit eingebetteter Vorschau
```

---

## 🖥️ `templates/admin/settings.html`

Die Vorschau erscheint oberhalb des Einstellungsformulars:

```html
<h2>🔍 Live-Vorschau</h2>
<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">Beispiel-Titel</h2>
    <p id="preview-paragraph">Dies ist ein Beispielabschnitt mit Beispielinhalt für die Vorschau.</p>
</div>
```

Dazu ein eingebettetes `<script>` mit JavaScript:

```js
function updatePreview() {
    ...
}
document.addEventListener("DOMContentLoaded", () => {
    ...
});
```

Die JS-Funktion greift auf die Werte der Dropdowns und Farbwähler zu und passt die CSS-Stile des Vorschaukastens dynamisch an.

---

## 📜 Unterstützte Einstellungen mit Vorschau

| Einstellungsschlüssel   | Typ           | Visualisierung im Preview |
|-------------------------|----------------|-----------------------------|
| `section_title_css`     | Font Size, Color, Weight | ✅ |
| `paragraph_css`         | Font Size, Color         | ✅ |
| `body_font`             | Font Family              | ✅ |

---

## ▶️ Ergebnis

- Benutzer kann CSS-Werte direkt anpassen **und live sehen**, wie sich dies auf Titel und Absätze auswirkt.
- Funktioniert ohne Neuladen der Seite.
- Verbesserte Benutzerfreundlichkeit für Nicht-Programmierer.

---

## 📦 Beispiel zum Testen

Starte das Projekt:

```bash
python run.py
```

Rufe im Browser auf:

```
http://localhost:40505/admin/settings
```

Jetzt kannst du Farben, Größen und Schriftarten live ändern und visuell prüfen.

---

✅ **Die Vorschau zeigt sofortige Änderungen – speichere sie, wenn du zufrieden bist.**



================================================
FILE: step9/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40509)



================================================
FILE: step9/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step9/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step9/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step9/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            return redirect(url_for("admin.manage_settings"))

        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step9/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step9/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step9/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step9/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step9/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step9/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
<h2>🔍 Live-Vorschau</h2>

<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">Beispiel-Titel</h2>
    <p id="preview-paragraph">Dies ist ein Beispielabschnitt mit Beispielinhalt für die Vorschau.</p>
</div>

    <!-- section_title_css -->
    <h3>section_title_css</h3>

    <label>📏 Font Size:</label>
    <select name="section_title_css_font_size">
        {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
            <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

    <br><br>

    <label>🔠 Font Weight:</label>
    <select name="section_title_css_weight">
        {% for w in ["normal", "bold", "lighter"] %}
            <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
        {% endfor %}
    </select>

    <hr>

    <!-- paragraph_css -->
    <h3>paragraph_css</h3>

    <label>📏 Font Size:</label>
    <select name="paragraph_css_font_size">
        {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
            <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

    <hr>

    <!-- باقي الإعدادات -->
    {% for setting in settings %}
        {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endif %}
    {% endfor %}

    <button type="submit">💾 Änderungen speichern</button>
    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>


================================================
FILE: step9/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step9/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")





================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) 2025 inDeutschland

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: requirements.txt
================================================
# step 1: Install Flask
flask
# step 3: Install Flask-SQLAlchemy
flask-sqlalchemy
# step 11: i18nitialize Flask-Babel
flask-babel==4.0.0
deep_translator





================================================
FILE: summary_tree.txt
================================================
📁 lebenslauf/
├── 📁 instance/
│   └── lebenslauf.db
├── 📁 step0/
│   ├── 📁 templates/
│   │   ├── add.html
│   │   ├── edit.html
│   │   ├── edit_tool.html
│   │   ├── index.html
│   │   └── tools.html
│   ├── db.py
│   └── main.py
├── 📁 step01/
│   ├── README_step_01.md
│   ├── README_step_01_ar.md
│   └── run.py
├── 📁 step02/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 routes/
│   │   └── main_routes.py
│   ├── 📁 templates/
│   │   └── home.html
│   ├── README_step_02.md
│   ├── README_step_02_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step03/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   └── main_routes.py
│   ├── 📁 templates/
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_03.md
│   ├── README_step_03_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step04/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   └── main_routes.py
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   └── sections.html
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_04.md
│   ├── README_step_04_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step05/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   └── sections.html
│   │   ├── 📁 public/
│   │   │   └── resume.html
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_05.md
│   ├── README_step_05_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step06/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   └── sections.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_06.md
│   ├── README_step_06_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step07/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_07.md
│   ├── README_step_07_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step08/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_08.md
│   ├── README_step_08_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step09/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_09.md
│   ├── README_step_09_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step10/
│   ├── 📁 config/
│   │   └── settings.py
│   ├── 📁 logic/
│   │   └── builder.py
│   ├── 📁 models/
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── README_step_10.md
│   ├── README_step_10_ar.md
│   ├── __init__.py
│   └── run.py
├── 📁 step11/
│   ├── 📁 config/
│   │   ├── __init__.py
│   │   └── settings.py
│   ├── 📁 instance/
│   ├── 📁 logic/
│   │   ├── __init__.py
│   │   └── builder.py
│   ├── 📁 models/
│   │   ├── __init__.py
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── __init__.py
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html
│   │   │   └── settings.html
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   └── home.html
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── 📁 translations/
│   │   ├── 📁 ar/
│   │   │   └── 📁 LC_MESSAGES/
│   │   │       ├── messages.mo
│   │   │       └── messages.po
│   │   └── 📁 de/
│   │       └── 📁 LC_MESSAGES/
│   │           ├── messages.mo
│   │           └── messages.po
│   ├── README_step_11.md
│   ├── README_step_11_ar.md
│   ├── __init__.py
│   ├── babel.cfg
│   ├── extensions.py
│   ├── i18n_runtime.py
│   ├── i18n_translate.py
│   └── run.py
├── 📁 step12/
│   ├── 📁 config/
│   │   ├── __init__.py
│   │   └── settings.py
│   ├── 📁 instance/
│   ├── 📁 logic/
│   │   ├── __init__.py
│   │   └── builder.py
│   ├── 📁 models/
│   │   ├── __init__.py
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── __init__.py
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html.j2
│   │   │   └── settings.html.j2
│   │   ├── 📁 partials/
│   │   │   ├── footer.html.j2
│   │   │   └── navbar.html.j2
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   ├── base.html.j2
│   │   └── home.html.j2
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── 📁 translations/
│   │   ├── 📁 ar/
│   │   │   └── 📁 LC_MESSAGES/
│   │   │       ├── messages.mo
│   │   │       └── messages.po
│   │   └── 📁 de/
│   │       └── 📁 LC_MESSAGES/
│   │           ├── messages.mo
│   │           └── messages.po
│   ├── README_step_12.md
│   ├── README_step_12_ar.md
│   ├── __init__.py
│   ├── babel.cfg
│   ├── extensions.py
│   ├── i18n_runtime.py
│   ├── i18n_translate.py
│   └── run.py
├── 📁 step13/
│   ├── 📁 config/
│   │   ├── __init__.py
│   │   └── settings.py
│   ├── 📁 logic/
│   │   ├── __init__.py
│   │   └── builder.py
│   ├── 📁 models/
│   │   ├── __init__.py
│   │   └── models.py
│   ├── 📁 routes/
│   │   ├── __init__.py
│   │   ├── admin_routes.py
│   │   ├── main_routes.py
│   │   └── public_routes.py
│   ├── 📁 static/
│   │   └── 📁 css/
│   │       └── resume.css
│   ├── 📁 templates/
│   │   ├── 📁 admin/
│   │   │   ├── sections.html.j2
│   │   │   └── settings.html.j2
│   │   ├── 📁 partials/
│   │   │   ├── footer.html.j2
│   │   │   └── navbar.html.j2
│   │   ├── 📁 public/
│   │   │   └── resume.html.j2
│   │   ├── base.html.j2
│   │   └── home.html.j2
│   ├── 📁 tools/
│   │   └── init_db.py
│   ├── 📁 translations/
│   │   ├── 📁 ar/
│   │   │   └── 📁 LC_MESSAGES/
│   │   │       ├── messages.mo
│   │   │       └── messages.po
│   │   └── 📁 de/
│   │       └── 📁 LC_MESSAGES/
│   │           ├── messages.mo
│   │           └── messages.po
│   ├── __init__.py
│   ├── babel.cfg
│   ├── extensions.py
│   ├── i18n_runtime.py
│   ├── i18n_translate.py
│   └── run.py
├── .gitignore
├── LICENSE
├── README.md
├── app.py
├── flask_app.db
└── requirements.txt


================================================
FILE: step0/db.py
================================================
# db.py
import sqlite3
import inspect
import flask
from flask import Flask

DB_PATH = "flask_app.db"
REBUILD_DB = True  # ✅ يمكنك تعيينه إلى False لاحقًا إذا لم ترغب في حذف الجداول

external_tools = [
    "Flask", "request", "session", "redirect", "url_for", "render_template", "abort",
    "g", "current_app", "Blueprint", "make_response", "jsonify", "Response",
    "Config", "escape", "flash", "get_flashed_messages"
]

tool_categories = {
    "Flask": "Core",
    "request": "Request",
    "session": "Session",
    "redirect": "Routing",
    "url_for": "Routing",
    "render_template": "Templating",
    "abort": "Error Handling",
    "g": "Globals",
    "current_app": "App Context",
    "Blueprint": "Structure",
    "make_response": "Response",
    "jsonify": "Response",
    "Response": "Response",
    "Config": "Configuration",
    "escape": "Security",
    "flash": "Messages",
    "get_flashed_messages": "Messages"
}

tool_examples = {
    "request": "name = request.args.get('name')",
    "session": "session['user'] = 'admin'",
    "redirect": "return redirect(url_for('home'))",
    "url_for": "url_for('index')",
    "render_template": "return render_template('index.html')",
    "abort": "abort(404)",
    "g": "g.user = current_user",
    "current_app": "current_app.logger.info('Hello')",
    "Blueprint": "bp = Blueprint('admin', __name__, url_prefix='/admin')",
    "make_response": "resp = make_response('Hello')",
    "jsonify": "return jsonify({'message': 'ok'})",
    "Response": "resp = Response('Hello', status=200)",
    "Config": "app.config['DEBUG'] = True",
    "escape": "escape('<script>')",
    "flash": "flash('Welcome!')",
    "get_flashed_messages": "get_flashed_messages()"
}

app = Flask(__name__)
filtered_attributes = [attr for attr in dir(app) if not attr.startswith("__")]

def guess_category(attr):
    name = attr.lower()
    if 'route' in name or 'url' in name or 'view' in name:
        return 'Routing'
    elif 'run' in name or 'wsgi' in name or 'client' in name:
        return 'Server'
    elif 'config' in name or 'secret' in name:
        return 'Configuration'
    elif 'jinja' in name or 'template' in name:
        return 'Templates'
    elif 'request' in name or 'response' in name or 'teardown' in name or 'context' in name:
        return 'Request Lifecycle'
    elif 'static' in name:
        return 'Static Files'
    elif 'session' in name:
        return 'Sessions'
    elif 'error' in name or 'exception' in name:
        return 'Error Handling'
    elif 'log' in name:
        return 'Logging'
    elif 'cli' in name or 'shell' in name:
        return 'CLI Tools'
    else:
        return 'Other'

def manual_example(attr):
    name = attr.lower()
    examples = {
        "run": "app.run(debug=True)",
        "route": "@app.route('/')\ndef home():\n    return 'Hello, World!'",
        "config": "app.config['DEBUG'] = True",
        "logger": "app.logger.info('Server started')",
        "get": "@app.get('/items')\ndef get_items():\n    return 'Items'",
        "post": "@app.post('/submit')\ndef submit():\n    return 'Submitted'",
        "template_folder": "app = Flask(__name__, template_folder='my_templates')",
        "static_folder": "app = Flask(__name__, static_folder='assets')",
        "before_request": "@app.before_request\ndef before():\n    print('Before request')",
        "after_request": "@app.after_request\ndef after(response):\n    print('After request')\n    return response",
        "errorhandler": "@app.errorhandler(404)\ndef not_found(e):\n    return 'Not Found', 404",
        "test_client": "client = app.test_client()\nresponse = client.get('/')",
        "url_for": "url_for('home')",
        "add_url_rule": "app.add_url_rule('/', 'index', lambda: 'Index')"
    }
    return examples.get(name)

def generate_example(attr):
    example = manual_example(attr)
    is_manual = 1 if example else 0
    if not example:
        example = f"# Placeholder example\napp.{attr}(...)"
    return example, is_manual

conn = sqlite3.connect(DB_PATH)
cur = conn.cursor()
cur.execute("PRAGMA foreign_keys = ON;")

if REBUILD_DB:
    cur.executescript("""
    DROP TABLE IF EXISTS examples;
    DROP TABLE IF EXISTS attributes;
    DROP TABLE IF EXISTS categories;
    DROP TABLE IF EXISTS external_tools;
    """)

cur.executescript("""
CREATE TABLE IF NOT EXISTS categories (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS attributes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    category_id INTEGER,
    FOREIGN KEY (category_id) REFERENCES categories(id)
);

CREATE TABLE IF NOT EXISTS examples (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    attribute_id INTEGER NOT NULL,
    example TEXT NOT NULL,
    is_manual INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (attribute_id) REFERENCES attributes(id)
);

CREATE TABLE IF NOT EXISTS external_tools (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    category TEXT,
    category_id INTEGER,
    example TEXT,
    is_manual INTEGER DEFAULT 0,
    type TEXT,
    FOREIGN KEY (category_id) REFERENCES categories(id)
);
""")

all_categories = set(guess_category(attr) for attr in filtered_attributes)
all_categories.update(tool_categories.values())

category_id_map = {}
for category in sorted(all_categories):
    cur.execute("INSERT OR IGNORE INTO categories (name) VALUES (?)", (category,))
    cur.execute("SELECT id FROM categories WHERE name = ?", (category,))
    category_id_map[category] = cur.fetchone()[0]
conn.commit()

for attr in filtered_attributes:
    category = guess_category(attr)
    category_id = category_id_map[category]
    cur.execute("INSERT INTO attributes (name, category_id) VALUES (?, ?)", (attr, category_id))
    attr_id = cur.lastrowid
    example, is_manual = generate_example(attr)
    cur.execute("INSERT INTO examples (attribute_id, example, is_manual) VALUES (?, ?, ?)", (attr_id, example, is_manual))
conn.commit()

# --- إدخال أدوات Flask الخارجية (تنفيذ نهائي بعد بناء كل شيء) ---
for name in external_tools:
    try:
        obj = getattr(flask, name)
    except AttributeError:
        obj = globals().get(name) or flask.__dict__.get(name)

    if obj is None:
        type_ = 'unresolved'
    elif inspect.isclass(obj):
        type_ = 'class'
    elif inspect.isfunction(obj):
        type_ = 'function'
    elif inspect.ismethod(obj):
        type_ = 'method'
    elif inspect.isbuiltin(obj):
        type_ = 'builtin'
    elif inspect.ismodule(obj):
        type_ = 'module'
    else:
        type_ = 'other'

    category = tool_categories.get(name, "Uncategorized")
    example = tool_examples.get(name, f"# No example yet for {name}")
    is_manual = 1 if name in tool_examples else 0

    category_id = category_id_map.get(category)
    if category_id is None:
        print(f"❌ تصنيف غير موجود: {category} — تخطٍ")
        continue

    print(f"✅ إدراج: {name} | التصنيف: {category} | النوع: {type_} | ID: {category_id}")
    cur.execute("""
        INSERT INTO external_tools (name, category, example, is_manual, type, category_id)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (name, category, example, is_manual, type_, category_id))
conn.commit()

cur.execute("SELECT COUNT(*) FROM external_tools")
print(f"\n📊 عدد الأدوات المُدخلة في external_tools: {cur.fetchone()[0]}")
cur.execute("SELECT COUNT(*) FROM attributes")
print(f"📊 عدد وكلاء app المُدخلة: {cur.fetchone()[0]}")

conn.close()
print("\n✅ تم بناء قاعدة البيانات بنجاح.")



================================================
FILE: step0/main.py
================================================
import os
from flask import Flask, render_template, request, redirect, url_for
import sqlite3

# مسار قاعدة البيانات من المجلد الأعلى
DB = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'flask_app.db'))

app = Flask(__name__)

def get_db_connection():
    conn = sqlite3.connect(DB)
    conn.row_factory = sqlite3.Row
    return conn

@app.route('/')
def index():
    conn = get_db_connection()
    q = request.args.get('q', '').strip()
    if q:
        rows = conn.execute("""
            SELECT a.name AS attribute, e.example, e.is_manual, e.id
            FROM attributes a
            JOIN examples e ON a.id = e.attribute_id
            WHERE a.name LIKE ?
            ORDER BY e.is_manual DESC, a.name
        """, (f'%{q}%',)).fetchall()
    else:
        rows = conn.execute("""
            SELECT a.name AS attribute, e.example, e.is_manual, e.id
            FROM attributes a
            JOIN examples e ON a.id = e.attribute_id
            ORDER BY a.name
        """).fetchall()
    conn.close()
    return render_template('index.html', examples=rows, q=q)

@app.route('/edit/<int:id>', methods=['GET', 'POST'])
def edit(id):
    conn = get_db_connection()
    if request.method == 'POST':
        new_example = request.form['example']
        conn.execute("UPDATE examples SET example = ?, is_manual = 1 WHERE id = ?", (new_example, id))
        conn.commit()
        conn.close()
        return redirect(url_for('index'))
    example = conn.execute("SELECT a.name AS attribute, e.example FROM examples e JOIN attributes a ON a.id = e.attribute_id WHERE e.id = ?", (id,)).fetchone()
    conn.close()
    return render_template('edit.html', example=example, id=id)

@app.route('/tools')
def tools():
    conn = get_db_connection()
    q = request.args.get('q', '').strip()
    if q:
        rows = conn.execute("""
            SELECT et.name, et.type, et.example, c.name as category, et.id
            FROM external_tools et
            LEFT JOIN categories c ON et.category_id = c.id
            WHERE et.name LIKE ?
            ORDER BY et.name
        """, (f'%{q}%',)).fetchall()
    else:
        rows = conn.execute("""
            SELECT et.name, et.type, et.example, c.name as category, et.id
            FROM external_tools et
            LEFT JOIN categories c ON et.category_id = c.id
            ORDER BY et.name
        """).fetchall()
    conn.close()
    return render_template('tools.html', tools=rows, q=q)

@app.route('/tools/edit/<int:id>', methods=['GET', 'POST'])
def edit_tool(id):
    conn = get_db_connection()
    if request.method == 'POST':
        new_example = request.form['example']
        conn.execute("UPDATE external_tools SET example = ?, is_manual = 1 WHERE id = ?", (new_example, id))
        conn.commit()
        conn.close()
        return redirect(url_for('tools'))
    tool = conn.execute("""
        SELECT et.name, et.type, et.example, c.name as category
        FROM external_tools et
        LEFT JOIN categories c ON et.category_id = c.id
        WHERE et.id = ?
    """, (id,)).fetchone()
    conn.close()
    return render_template('edit_tool.html', tool=tool, id=id)

@app.route('/add', methods=['GET', 'POST'])
def add_example():
    conn = get_db_connection()
    if request.method == 'POST':
        attribute_id = request.form['attribute_id']
        example = request.form['example']
        conn.execute("INSERT INTO examples (attribute_id, example, is_manual) VALUES (?, ?, 1)",
                     (attribute_id, example))
        conn.commit()
        conn.close()
        return redirect(url_for('index'))
    attributes = conn.execute("SELECT id, name FROM attributes ORDER BY name").fetchall()
    conn.close()
    return render_template('add.html', attributes=attributes)

app.run(debug=True)



================================================
FILE: step0/templates/add.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Add Example</title>
</head>
<body>
    <h1>Add New Example</h1>
    <form method="POST">
        <label for="attribute_id">Attribute:</label>
        <select name="attribute_id" required>
            {% for attr in attributes %}
                <option value="{{ attr.id }}">{{ attr.name }}</option>
            {% endfor %}
        </select><br><br>
        <label for="example">Example:</label><br>
        <textarea name="example" rows="5" cols="60" required></textarea><br><br>
        <input type="submit" value="Add Example">
    </form>
    <p><a href="{{ url_for('index') }}">Back to Home</a></p>
</body>
</html>


================================================
FILE: step0/templates/edit.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Edit Example</title>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.js"></script>
    <style>
        body { font-family: Arial; margin: 40px; background: #f9f9f9; }
        textarea { width: 100%; height: 200px; padding: 10px; font-family: monospace; }
        input[type="submit"] { padding: 10px 20px; margin-top: 10px; background: green; color: white; border: none; }
        pre { background: #f0f0f0; padding: 10px; border-radius: 5px; }
        h2, h3 { color: #333; }
    </style>
</head>
<body>
    <h2>Edit Example for: {{ example['attribute'] }}</h2>
    <form method="post">
        <textarea name="example">{{ example['example'] }}</textarea><br>
        <input type="submit" value="Save">
    </form>

    <h3>Preview:</h3>
    <pre><code class="language-python">{{ example['example'] }}</code></pre>

    <p><a href="{{ url_for('index') }}">← Back</a></p>
</body>
</html>



================================================
FILE: step0/templates/edit_tool.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Edit Tool Example</title>
    <style>
        body { font-family: Arial; margin: 40px; background: #f9f9f9; }
        textarea { width: 100%; height: 200px; font-family: monospace; padding: 10px; }
        input[type="submit"] { margin-top: 10px; padding: 10px 20px; }
        a { text-decoration: none; color: #007BFF; }
    </style>
</head>
<body>
    <h1>Edit Example: {{ tool.name }}</h1>
    <p><strong>Type:</strong> {{ tool.type }} | <strong>Category:</strong> {{ tool.category or 'Uncategorized' }}</p>
    <form method="post">
        <textarea name="example">{{ tool.example }}</textarea><br>
        <input type="submit" value="💾 Save Example">
    </form>
    <p><a href="{{ url_for('tools') }}">⬅ Back to Tools</a></p>
</body>
</html>



================================================
FILE: step0/templates/index.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Flask Attribute Examples</title>
    <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.js"></script>
    <style>
        body { font-family: Arial; margin: 40px; background: #f4f4f4; }
        input[type="text"] { padding: 8px; width: 300px; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; background: white; }
        th, td { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; vertical-align: top; }
        th { background-color: #eee; }
        .manual { color: green; font-weight: bold; }
        .auto { color: #999; }
        a.button { text-decoration: none; padding: 6px 12px; background: #007BFF; color: white; border-radius: 4px; }
        pre { background: #f0f0f0; padding: 10px; border-radius: 5px; position: relative; }
        button.copy-btn {
            position: absolute;
            top: 5px;
            right: 10px;
            padding: 3px 8px;
            background: #007BFF;
            color: white;
            border: none;
            font-size: 12px;
            border-radius: 3px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>Flask Attribute Examples</h1>
    <form method="get" action="/">
        <input type="text" name="q" value="{{ q }}" placeholder="Search attribute...">
        <input type="submit" value="Search">
    </form>
    <p>
        <a href="{{ url_for('add_example') }}" class="button">➕ Add New Example</a>
        <a href="{{ url_for('tools') }}" class="button">🧰 View External Tools</a>
    </p>

    <table>
        <tr><th>Attribute</th><th>Example</th><th>Status</th><th>Actions</th></tr>
        {% for row in examples %}
        <tr>
            <td>{{ row['attribute'] }}</td>
            <td>
                <pre>
                    <button class="copy-btn" onclick="copyCode(this)">Copy</button>
                    <code class="language-python">{{ row['example'] }}</code>
                </pre>
            </td>
            <td class="{{ 'manual' if row['is_manual'] else 'auto' }}">{{ 'Manual' if row['is_manual'] else 'Auto' }}</td>
            <td><a href="{{ url_for('edit', id=row['id']) }}" class="button">Edit</a></td>
        </tr>
        {% endfor %}
    </table>

    <script>
        function copyCode(button) {
            const codeBlock = button.nextElementSibling;
            const text = codeBlock.innerText;
            navigator.clipboard.writeText(text).then(() => {
                button.innerText = "✅ Copied!";
                setTimeout(() => { button.innerText = "Copy"; }, 1500);
            });
        }
    </script>
</body>
</html>



================================================
FILE: step0/templates/tools.html
================================================
<!DOCTYPE html>
<html>
<head>
    <title>Flask External Tools</title>
    <style>
        body { font-family: Arial; margin: 40px; background: #f4f4f4; }
        input[type="text"] { padding: 8px; width: 300px; }
        table { border-collapse: collapse; width: 100%; margin-top: 20px; background: white; }
        th, td { padding: 10px; border-bottom: 1px solid #ccc; text-align: left; }
        th { background-color: #eee; }
        .manual { color: green; font-weight: bold; }
        .auto { color: #999; }
        a.button { text-decoration: none; padding: 6px 12px; background: #007BFF; color: white; border-radius: 4px; }
    </style>
</head>
<body>
    <h1>Flask External Tools</h1>
    <form method="get" action="/tools">
        <input type="text" name="q" value="{{ q }}" placeholder="Search tool...">
        <input type="submit" value="Search">
    </form>
    <table>
        <tr><th>Name</th><th>Type</th><th>Category</th><th>Example</th><th>Status</th><th>Actions</th></tr>
        {% for row in tools %}
        <tr>
            <td>{{ row['name'] }}</td>
            <td>{{ row['type'] }}</td>
            <td>{{ row['category'] or 'Uncategorized' }}</td>
            <td><pre>{{ row['example'] }}</pre></td>
            <td class="{{ 'manual' if row['is_manual'] else 'auto' }}">{{ 'Manual' if row['is_manual'] else 'Auto' }}</td>
            <td><a href="{{ url_for('edit_tool', id=row['id']) }}" class="button">Edit</a></td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>



================================================
FILE: step01/README_step_01.md
================================================
# Schritt 1 – Einfaches Flask-Projekt starten (Port 4050)

## 🎯 Ziel
Ein minimales Flask-Projekt starten, das auf dem Port `4050` läuft und eine Willkommensnachricht anzeigt.

---

## 🧱 Struktur

```
lebenslauf/
└── run.py
```

---

## 🧪 Inhalt von `run.py`

```python
from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "Lebenslauf Projekt gestartet erfolgreich!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4050, debug=True)
```

---

## ▶️ Ausführen

```bash
pip install flask
python run.py
```

Dann im Browser öffnen:

```
http://localhost:4050
```

---

## ✅ Ergebnis
Im Browser sollte folgende Nachricht erscheinen:

```
Lebenslauf Projekt gestartet erfolgreich!
```


================================================
FILE: step01/README_step_01_ar.md
================================================

# الخطوة 1 – بدء مشروع Flask بسيط (المنفذ 4050)

## 🎯 الهدف  
تشغيل مشروع Flask بسيط جدًا يعمل على المنفذ `4050` ويعرض رسالة ترحيبية.

---

## 🧱 الهيكل

```
lebenslauf/
└── run.py
```

---

## 🧪 محتوى الملف `run.py`

```python
from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "تم تشغيل مشروع السيرة الذاتية بنجاح!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4050, debug=True)
```

---

## ▶️ التشغيل

```bash
pip install flask
python run.py
```

ثم افتح المتصفح على:

```
http://localhost:4050
```

---

## ✅ النتيجة  
يجب أن تظهر الرسالة التالية في المتصفح:

```
تم تشغيل مشروع السيرة الذاتية بنجاح!
```



================================================
FILE: step01/run.py
================================================
from flask import Flask

app = Flask(__name__)

@app.route("/")
def home():
    return "Lebenslauf Projekt gestartet erfolgreich!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40501, debug=True)



================================================
FILE: step02/__init__.py
================================================
# __init__.py

from flask import Flask

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    # تسجيل المسارات
    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app



================================================
FILE: step02/README_step_02.md
================================================
# Schritt 2 – Projektstruktur organisieren (Flat + Modular)

## 🎯 Ziel
Das Projekt in eine saubere, modulare Struktur organisieren, bereit für Erweiterung, Übersetzung und Admin-Panel.

---

## 🧱 Struktur nach dieser Phase

```
lebenslauf/
│
├── run.py                  # Einstiegspunkt
├── __init__.py             # App-Factory
│
├── config/
│   └── settings.py         # Flask-Konfiguration
│
├── routes/
│   └── main_routes.py      # Homepage-Routen
│
├── templates/
│   └── home.html           # HTML-Begrüßungsseite
│
├── static/
│   ├── css/
│   └── js/
```

---

## 📂 Dateien im Detail

### `config/settings.py`

```python
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    DEBUG = True
```

---

### `__init__.py`

```python
from flask import Flask

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app
```

---

### `run.py`

```python
from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4050)
```

---

### `routes/main_routes.py`

```python
from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")
```

---

### `templates/home.html`

```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>
```

---

## ▶️ Ausführen

```bash
python run.py
```

Dann im Browser öffnen:  
[http://localhost:4050](http://localhost:4050)

---

## ✅ Ergebnis
Eine HTML-Seite mit Begrüßung erscheint:

```
✅ Lebenslauf Projekt gestartet erfolgreich!
```


================================================
FILE: step02/README_step_02_ar.md
================================================

# الخطوة 2 – تنظيم هيكل المشروع (مستوي + معياري)

## 🎯 الهدف
تنظيم المشروع ضمن هيكل نظيف ومعياري، جاهز للتوسعة، الترجمة، ولوحة تحكم المشرف.

---

## 🧱 الهيكل بعد هذه المرحلة

```
lebenslauf/
│
├── run.py                  # نقطة البداية
├── __init__.py             # مصنع التطبيق (App Factory)
│
├── config/
│   └── settings.py         # إعدادات Flask
│
├── routes/
│   └── main_routes.py      # مسارات الصفحة الرئيسية
│
├── templates/
│   └── home.html           # صفحة HTML ترحيبية
│
├── static/
│   ├── css/
│   └── js/
```

---

## 📂 تفاصيل الملفات

### `config/settings.py`

```python
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    DEBUG = True
```

---

### `__init__.py`

```python
from flask import Flask

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app
```

---

### `run.py`

```python
from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=4050)
```

---

### `routes/main_routes.py`

```python
from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")
```

---

### `templates/home.html`

```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <title>مشروع السيرة الذاتية</title>
</head>
<body>
    <h1>✅ تم تشغيل مشروع السيرة الذاتية بنجاح!</h1>
</body>
</html>
```

---

## ▶️ التشغيل

```bash
python run.py
```

ثم افتح المتصفح على:  
[http://localhost:4050](http://localhost:4050)

---

## ✅ النتيجة
تظهر صفحة HTML ترحيبية:

```
✅ تم تشغيل مشروع السيرة الذاتية بنجاح!
```



================================================
FILE: step02/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40502)



================================================
FILE: step02/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    DEBUG = True



================================================
FILE: step02/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step02/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step03/__init__.py
================================================
from flask import Flask
from models.models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app



================================================
FILE: step03/README_step_03.md
================================================
# Schritt 3 – Datenbank und Grundmodelle einrichten (SQLAlchemy)

## 🎯 Ziel
Einrichtung der SQLite-Datenbank mit SQLAlchemy und Definition der Grundtabellen:
- `Section`: Lebenslauf-Bereiche
- `Setting`: Formatierungseinstellungen

---

## 🧱 Neue Struktur

```
lebenslauf/
├── models/
│   └── models.py          # Datenbankmodelle
├── tools/
│   └── init_db.py         # Initialisierungsskript
├── config/
│   └── settings.py        # Datenbank-Konfiguration
├── __init__.py            # App-Factory mit DB-Integration
```

---

## 💾 Abhängigkeit installieren

```bash
pip install flask_sqlalchemy
```

---

## 🧪 Konfiguration in `config/settings.py`

```python
class Config:
    SECRET_KEY = 'dev_key'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True
```

---

## 🧩 Inhalt von `models/models.py`

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)
```

---

## 🔗 App-Integration in `__init__.py`

```python
from flask import Flask
from models.models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app
```

---

## 🛠️ Datenbank initialisieren – `tools/init_db.py`

```python
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app
from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")
```

---

## ▶️ Ausführen

```bash
python tools/init_db.py
```

Dann:

```bash
python run.py
```

Und im Browser öffnen:
[http://localhost:4050](http://localhost:4050)

---

## ✅ Ergebnis
- Datenbankdatei `lebenslauf.db` wurde erstellt.
- Grunddaten sind vorhanden.


================================================
FILE: step03/README_step_03_ar.md
================================================

# الخطوة 3 – إعداد قاعدة البيانات والنماذج الأساسية (SQLAlchemy)

## 🎯 الهدف
إعداد قاعدة بيانات SQLite باستخدام SQLAlchemy وتعريف الجداول الأساسية:
- `Section`: أقسام السيرة الذاتية
- `Setting`: إعدادات التنسيق

---

## 🧱 الهيكل الجديد

```
lebenslauf/
├── models/
│   └── models.py          # نماذج قاعدة البيانات
├── tools/
│   └── init_db.py         # سكربت التهيئة
├── config/
│   └── settings.py        # إعدادات قاعدة البيانات
├── __init__.py            # مصنع التطبيق مع تكامل قاعدة البيانات
```

---

## 💾 تثبيت الاعتماد

```bash
pip install flask_sqlalchemy
```

---

## 🧪 الإعداد في `config/settings.py`

```python
class Config:
    SECRET_KEY = 'dev_key'
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True
```

---

## 🧩 محتوى `models/models.py`

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)
```

---

## 🔗 التكامل داخل `__init__.py`

```python
from flask import Flask
from models.models import db

def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)

    return app
```

---

## 🛠️ تهيئة قاعدة البيانات – `tools/init_db.py`

```python
import sys, os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app
from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    sections = [
        "الملف الشخصي", "الهدف المهني", "المجالات المفضلة",
        "الخبرات العملية", "المؤهلات", "المهارات التقنية",
        "اللغات", "المشاريع", "الروابط", "الاهتمامات"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ تم تهيئة قاعدة البيانات وإدخال بيانات تجريبية.")
```

---

## ▶️ التشغيل

```bash
python tools/init_db.py
```

ثم:

```bash
python run.py
```

ثم فتح المتصفح على:  
[http://localhost:4050](http://localhost:4050)

---

## ✅ النتيجة
- تم إنشاء ملف قاعدة البيانات `lebenslauf.db`.
- البيانات الأساسية أصبحت جاهزة.



================================================
FILE: step03/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40503)



================================================
FILE: step03/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step03/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step03/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step03/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step03/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step04/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)

    return app



================================================
FILE: step04/README_step_04.md
================================================
# Schritt 4 – Admin-Oberfläche für Lebenslauf-Abschnitte

## 🎯 Ziel
Erstellung einer Admin-Seite zum Bearbeiten und Speichern aller Lebenslauf-Abschnitte direkt aus der Datenbank.

---

## 🧱 Neue Struktur

```
lebenslauf/
├── routes/
│   └── admin_routes.py       # Admin-Routen
├── templates/
│   └── admin/
│       └── sections.html     # Admin-HTML-Seite zur Bearbeitung
```

---

## 📂 `routes/admin_routes.py`

```python
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)
```

---

## 🛠️ Registrierung im `__init__.py`

```python
from routes.admin_routes import admin_bp
app.register_blueprint(admin_bp)
```

---

## 🖥️ `templates/admin/sections.html`

```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>
```

---

## ▶️ Ausführen

```bash
python run.py
```

Im Browser öffnen:

```
http://localhost:4050/admin/sections
```

---

## ✅ Ergebnis

- Alle Abschnitte werden dynamisch geladen.
- Änderungen können direkt gespeichert werden.
- Volle Bearbeitbarkeit über das Admin-Panel.


================================================
FILE: step04/README_step_04_ar.md
================================================

# الخطوة 4 – واجهة الإدارة لأقسام السيرة الذاتية

## 🎯 الهدف
إنشاء صفحة إدارة لتعديل وحفظ جميع أقسام السيرة الذاتية مباشرة من قاعدة البيانات.

---

## 🧱 الهيكل الجديد

```
lebenslauf/
├── routes/
│   └── admin_routes.py       # مسارات الإدارة
├── templates/
│   └── admin/
│       └── sections.html     # صفحة HTML للإدارة والتعديل
```

---

## 📂 `routes/admin_routes.py`

```python
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)
```

---

## 🛠️ تسجيل المسارات في `__init__.py`

```python
from routes.admin_routes import admin_bp
app.register_blueprint(admin_bp)
```

---

## 🖥️ `templates/admin/sections.html`

```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <title>إدارة الأقسام</title>
</head>
<body>
    <h1>📝 تعديل أقسام السيرة الذاتية</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 حفظ التعديلات</button>
    </form>
</body>
</html>
```

---

## ▶️ التشغيل

```bash
python run.py
```

ثم افتح في المتصفح:

```
http://localhost:4050/admin/sections
```

---

## ✅ النتيجة

- يتم تحميل جميع الأقسام بشكل ديناميكي.
- يمكن تعديلها وحفظها مباشرة.
- تحكم كامل من خلال لوحة الإدارة.



================================================
FILE: step04/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40504)



================================================
FILE: step04/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step04/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step04/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



================================================
FILE: step04/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step04/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step04/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step04/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step05/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step05/README_step_05.md
================================================
# Schritt 5 – Öffentliche Lebenslauf-Seite anzeigen (`/resume`)

## 🎯 Ziel
Erstellung einer öffentlichen Seite zur Anzeige des vollständigen Lebenslaufs mit Daten aus der Datenbank.

---

## 🧱 Neue Struktur

```
lebenslauf/
├── routes/
│   └── public_routes.py         # Öffentliche Routen
├── templates/
│   └── public/
│       └── resume.html          # Anzeigevorlage für den Lebenslauf
```

---

## 📂 `routes/public_routes.py`

```python
from flask import Blueprint, render_template
from models.models import Section

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    return render_template("public/resume.html", sections=sections)
```

---

## 🛠️ Registrierung im `__init__.py`

```python
from routes.public_routes import public_bp
app.register_blueprint(public_bp)
```

---

## 🖥️ `templates/public/resume.html`

```html
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
        }
        h2 {
            border-bottom: 1px solid #ccc;
            margin-top: 40px;
            color: #333;
        }
        .section-content {
            white-space: pre-wrap;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2>{{ section.title }}</h2>
        <div class="section-content">{{ section.content }}</div>
    {% endfor %}
</body>
</html>
```

---

## ▶️ Ausführen

```bash
python run.py
```

Dann im Browser öffnen:

```
http://localhost:4050/resume
```

---

## ✅ Ergebnis

- Alle Abschnitte werden dynamisch dargestellt.
- Inhalt stammt direkt aus der SQLite-Datenbank.
- Die Seite ist einfach, sauber und bereit zur Formatierung.


================================================
FILE: step05/README_step_05_ar.md
================================================

# الخطوة 5 – عرض صفحة السيرة الذاتية العامة (`/resume`)

## 🎯 الهدف
إنشاء صفحة عامة لعرض السيرة الذاتية الكاملة باستخدام البيانات من قاعدة البيانات.

---

## 🧱 الهيكل الجديد

```
lebenslauf/
├── routes/
│   └── public_routes.py         # المسارات العامة
├── templates/
│   └── public/
│       └── resume.html          # قالب العرض للسيرة الذاتية
```

---

## 📂 `routes/public_routes.py`

```python
from flask import Blueprint, render_template
from models.models import Section

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    return render_template("public/resume.html", sections=sections)
```

---

## 🛠️ تسجيل المسار في `__init__.py`

```python
from routes.public_routes import public_bp
app.register_blueprint(public_bp)
```

---

## 🖥️ `templates/public/resume.html`

```html
<!DOCTYPE html>
<html lang="ar">
<head>
    <meta charset="UTF-8">
    <title>السيرة الذاتية</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
        }
        h2 {
            border-bottom: 1px solid #ccc;
            margin-top: 40px;
            color: #333;
        }
        .section-content {
            white-space: pre-wrap;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>📄 سيرتي الذاتية</h1>

    {% for section in sections %}
        <h2>{{ section.title }}</h2>
        <div class="section-content">{{ section.content }}</div>
    {% endfor %}
</body>
</html>
```

---

## ▶️ التشغيل

```bash
python run.py
```

ثم افتح في المتصفح:

```
http://localhost:4050/resume
```

---

## ✅ النتيجة

- يتم عرض جميع الأقسام بشكل ديناميكي.
- المحتوى يأتي مباشرة من قاعدة بيانات SQLite.
- الصفحة بسيطة، نظيفة، وجاهزة للتنسيق.



================================================
FILE: step05/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40505)



================================================
FILE: step05/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step05/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step05/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



================================================
FILE: step05/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step05/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    return render_template("public/resume.html", sections=sections)



================================================
FILE: step05/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step05/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step05/templates/public/resume.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 40px;
        }
        h2 {
            border-bottom: 1px solid #ccc;
            margin-top: 40px;
            color: #333;
        }
        .section-content {
            white-space: pre-wrap;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2>{{ section.title }}</h2>
        <div class="section-content">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step05/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step06/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step06/README_step_06.md
================================================
# 📘 Schritt 6 – Dynamisches Styling & öffentliche Lebenslaufseite

## 🎯 Ziel  
Integration eines dynamischen CSS-Stylings basierend auf Daten aus der Datenbank, und Verbesserung der öffentlichen Lebenslaufseite `/resume`.

---

## ⚙️ Neue Funktionen

- 📄 Öffentliche Lebenslaufseite mit dynamisch gerenderten Abschnitten.
- 🎨 Dynamisches Styling über das `Setting`-Modell.
- 📁 Separates Stylesheet (`resume.css`) für globale Standard-Stile.
- 🧠 Unterstützung für individuelle Stildefinitionen je Bereich über die Datenbank.

---

## 📂 Neue/aktualisierte Dateien

```
step6/
├── logic/
│   └── builder.py                # Hilfsfunktion zum Laden von CSS-Einstellungen
├── static/
│   └── css/
│       └── resume.css            # Globales CSS für die Resume-Seite
├── templates/
│   └── public/
│       └── resume.html.j2        # Dynamisch formatierte Lebenslaufseite
├── routes/
│   └── public_routes.py          # Route für /resume mit dynamischem Styling
```

---

## 🧠 `get_css_setting` – Hilfsfunktion

```python
def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default
```

> Diese Funktion holt ein CSS-Objekt (z. B. `{'font-size': '18px', 'color': '#000'}`) und wandelt es in einen gültigen Style-String um.

---

## 🌐 `routes/public_routes.py`

```python
@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )
```

---

## 🖼️ `resume.html.j2`

```html
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>
    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
```

---

## 🎨 `resume.css`

```css
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}
.section-title {
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}
.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}
```

---

## 🛠️ Initialisierung der Datenbank

```bash
python tools/init_db.py
```

> Erstellt die Tabellen `Section` und `Setting` mit Startwerten.

---

## ▶️ Anwendung starten

```bash
python run.py
```

Dann öffnen:

```
http://localhost:40505/resume
```

---

## ✅ Ergebnis

- Lebenslauf-Abschnitte werden korrekt aus der Datenbank geladen.
- Formatierung ist dynamisch über Datenbank-Settings steuerbar.
- Seite ist bereit für erweitertes Layout, Druck-Ansicht, etc.


================================================
FILE: step06/README_step_06_ar.md
================================================

# 📘 الخطوة 6 – تنسيق ديناميكي وصفحة السيرة الذاتية العامة

## 🎯 الهدف  
دمج تنسيق CSS ديناميكي بناءً على البيانات من قاعدة البيانات، وتحسين صفحة السيرة الذاتية العامة `/resume`.

---

## ⚙️ الميزات الجديدة

- 📄 صفحة السيرة الذاتية العامة تعرض الأقسام ديناميكيًا.
- 🎨 تنسيق CSS ديناميكي عبر نموذج `Setting`.
- 📁 ملف CSS مستقل (`resume.css`) للتنسيق العام.
- 🧠 دعم تخصيص التنسيق لكل قسم من قاعدة البيانات.

---

## 📂 الملفات الجديدة/المحدّثة

```
step6/
├── logic/
│   └── builder.py                # دالة مساعدة لتحميل إعدادات CSS
├── static/
│   └── css/
│       └── resume.css            # تنسيق CSS عام لصفحة السيرة الذاتية
├── templates/
│   └── public/
│       └── resume.html.j2        # صفحة السيرة الذاتية بتنسيق ديناميكي
├── routes/
│   └── public_routes.py          # مسار /resume مع تنسيق ديناميكي
```

---

## 🧠 `get_css_setting` – دالة مساعدة

```python
def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default
```

> تقوم هذه الدالة بجلب كائن CSS (مثل `{'font-size': '18px', 'color': '#000'}`) وتحويله إلى سلسلة تنسيق صالحة.

---

## 🌐 `routes/public_routes.py`

```python
@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )
```

---

## 🖼️ `resume.html.j2`

```html
<body style="{{ body_font }}">
    <h1>📄 سيرتي الذاتية</h1>
    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
```

---

## 🎨 `resume.css`

```css
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}
.section-title {
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}
.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}
```

---

## 🛠️ تهيئة قاعدة البيانات

```bash
python tools/init_db.py
```

> ينشئ الجداول `Section` و`Setting` مع بيانات افتراضية.

---

## ▶️ تشغيل التطبيق

```bash
python run.py
```

ثم افتح المتصفح على:

```
http://localhost:40505/resume
```

---

## ✅ النتيجة

- يتم تحميل أقسام السيرة الذاتية من قاعدة البيانات.
- التنسيق يمكن التحكم فيه ديناميكيًا من خلال الإعدادات.
- الصفحة جاهزة لتنسيقات موسعة، عرض للطباعة، وغيرها.



================================================
FILE: step06/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40506)



================================================
FILE: step06/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step06/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step06/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step06/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



================================================
FILE: step06/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step06/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step06/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step06/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step06/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step06/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step06/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step07/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step07/README_step_07.md
================================================
# 🛠️ Schritt 7 – Admin-Oberfläche für dynamische CSS-Einstellungen

## 🎯 Ziel
Erstellung einer Admin-Seite zur Bearbeitung der Lebenslauf-Stile direkt aus der Datenbank via `/admin/settings`.

---

## ⚙️ Neue Funktionen

- ✅ Neue Admin-Route zur Bearbeitung von CSS-Stileinstellungen.
- ✅ Speichern von Änderungen direkt in der Tabelle `Setting`.
- ✅ Sofortige Wirkung der Änderungen auf die öffentliche Lebenslaufseite `/resume`.
- ✅ Fehlerprüfung für ungültige JSON-Werte.

---

## 📂 Neue/aktualisierte Dateien

```
step7/
├── routes/
│   └── admin_routes.py        # Neue Route: /admin/settings
├── templates/
│   └── admin/
│       └── settings.html      # Formular zur Bearbeitung der CSS-Einstellungen
```

---

## 🌐 Neue Route: `/admin/settings`

```python
@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    if request.method == "POST":
        try:
            for key, value in request.form.items():
                import json
                json.loads(value.replace("'", '"'))
                setting = Setting.query.filter_by(key=key).first()
                if setting:
                    setting.value = value
            db.session.commit()
            return redirect(url_for("admin.manage_settings"))
        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    settings = Setting.query.all()
    return render_template("admin/settings.html", settings=settings, error=error)
```

---

## 🖼️ Template: `settings.html`

```html
{% if error %}
    <p style="color: red;">{{ error }}</p>
{% endif %}

<form method="POST">
    {% for setting in settings %}
        <h3>{{ setting.key }}</h3>
        <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
        <hr>
    {% endfor %}
    <button type="submit">💾 Änderungen speichern</button>
</form>
```

---

## ▶️ Testen

1. Starte die App:
```bash
python run.py
```

2. Besuche im Browser:
```
http://localhost:40505/admin/settings
```

3. Bearbeite z. B. den Wert:
```json
{"font-size": "20px", "color": "#444", "font-weight": "bold"}
```

---

## ✅ Ergebnis

- Admins können jetzt CSS-Einstellungen sicher und einfach verwalten.
- Fehlerhafte Eingaben werden erkannt und nicht gespeichert.
- Die Resume-Seite `/resume` reflektiert jede Änderung sofort.

---

## 🔜 Nächster Schritt (Schritt 8)

- Verbesserung der Oberfläche mit visuellen Eingabeelementen (Color Picker, Dropdowns, Vorschau).


================================================
FILE: step07/README_step_07_ar.md
================================================

# 🛠️ الخطوة 7 – واجهة إدارة إعدادات CSS الديناميكية

## 🎯 الهدف
إنشاء صفحة إدارة لتعديل تنسيقات السيرة الذاتية مباشرة من قاعدة البيانات عبر `/admin/settings`.

---

## ⚙️ الميزات الجديدة

- ✅ مسار جديد للإدارة لتعديل إعدادات تنسيق CSS.
- ✅ حفظ التغييرات مباشرة داخل جدول `Setting`.
- ✅ ظهور التغييرات مباشرة على صفحة السيرة الذاتية `/resume`.
- ✅ التحقق من صحة تنسيقات JSON قبل الحفظ.

---

## 📂 الملفات الجديدة / المعدّلة

```
step7/
├── routes/
│   └── admin_routes.py        # مسار جديد: /admin/settings
├── templates/
│   └── admin/
│       └── settings.html      # نموذج لتعديل إعدادات CSS
```

---

## 🌐 المسار الجديد: `/admin/settings`

```python
@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    if request.method == "POST":
        try:
            for key, value in request.form.items():
                import json
                json.loads(value.replace("'", '"'))
                setting = Setting.query.filter_by(key=key).first()
                if setting:
                    setting.value = value
            db.session.commit()
            return redirect(url_for("admin.manage_settings"))
        except Exception as e:
            error = f"❌ خطأ في تنسيق JSON: {str(e)}"

    settings = Setting.query.all()
    return render_template("admin/settings.html", settings=settings, error=error)
```

---

## 🖼️ القالب: `settings.html`

```html
{% if error %}
    <p style="color: red;">{{ error }}</p>
{% endif %}

<form method="POST">
    {% for setting in settings %}
        <h3>{{ setting.key }}</h3>
        <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
        <hr>
    {% endfor %}
    <button type="submit">💾 حفظ التعديلات</button>
</form>
```

---

## ▶️ التجربة

1. تشغيل التطبيق:
```bash
python run.py
```

2. افتح في المتصفح:
```
http://localhost:40505/admin/settings
```

3. قم بتعديل قيمة مثل:
```json
{"font-size": "20px", "color": "#444", "font-weight": "bold"}
```

---

## ✅ النتيجة

- يمكن للمشرفين الآن تعديل إعدادات CSS بسهولة وأمان.
- يتم كشف التنسيقات غير الصحيحة وعدم حفظها.
- صفحة السيرة الذاتية `/resume` تعكس التعديلات فورًا.

---

## 🔜 الخطوة التالية (الخطوة 8)

- تحسين الواجهة بعناصر إدخال مرئية (مثل منتقي الألوان، القوائم المنسدلة، والمعاينة).



================================================
FILE: step07/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40507)



================================================
FILE: step07/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step07/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step07/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step07/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    if request.method == "POST":
        try:
            for key, value in request.form.items():
                # نحاول تحويل القيمة إلى JSON أولًا للتحقق من صحتها
                import json
                json.loads(value.replace("'", '"'))  # محاولة قراءة التنسيق
                setting = Setting.query.filter_by(key=key).first()
                if setting:
                    setting.value = value
            db.session.commit()
            return redirect(url_for("admin.manage_settings"))
        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    settings = Setting.query.all()
    return render_template("admin/settings.html", settings=settings, error=error)




================================================
FILE: step07/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step07/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step07/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step07/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step07/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step07/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">
        {% for setting in settings %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step07/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step07/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step08/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step08/README_step_08.md
================================================
# 🎨 Schritt 8 – Visuelle Bearbeitung von CSS-Stilen in der Admin-Oberfläche

## 🎯 Ziel
Die bisherigen JSON-basierten CSS-Einstellungen werden nun über visuelle Bedienelemente (Dropdowns, Farbwähler) bearbeitet – ganz ohne manuelles JSON!

---

## ✅ Unterstützte visuelle Felder

| Einstellungsschlüssel     | Eingabefelder                         |
|---------------------------|----------------------------------------|
| section_title_css         | Font Size, Color, Font Weight         |
| paragraph_css             | Font Size, Color                      |
| body_font                 | Font Family (Dropdown)                |

---

## 📁 Geänderte Dateien

```
step8/
├── routes/
│   └── admin_routes.py        # Erweiterte Logik zum Parsen visueller Felder
├── templates/
│   └── admin/
│       └── settings.html      # Visuelle Eingabeelemente statt Textarea für JSON
```

---

## 🖼️ Beispiel: `section_title_css`

```html
<select name="section_title_css_font_size">...</select>
<input type="color" name="section_title_css_color">
<select name="section_title_css_weight">...</select>
```

---

## 🖼️ Beispiel: `paragraph_css`

```html
<select name="paragraph_css_font_size">...</select>
<input type="color" name="paragraph_css_color">
```

---

## 🖼️ Beispiel: `body_font`

```html
<select name="body_font">
  <option value="Arial, sans-serif">Arial</option>
  <option value="Verdana, sans-serif">Verdana</option>
  ...
</select>
```

---

## ⚙️ Verarbeitung in `admin_routes.py`

- POST: Werte werden aus einzelnen Feldern gesammelt und in JSON umgewandelt (bzw. direkt gespeichert).
- GET: Werte werden geparsed und als Datenobjekte an das Template übergeben.

---

## ▶️ Anwendung starten

```bash
python run.py
```

Dann besuchen:
```
http://localhost:40505/admin/settings
```

---

## ✅ Ergebnis

- Admins können alle Stile bequem visuell konfigurieren.
- Kein Risiko durch fehlerhaftes JSON.
- Änderungen wirken sich direkt auf die öffentliche Lebenslaufseite `/resume` aus.

---

## 🔜 Nächster Schritt

- Live-Vorschau beim Bearbeiten.
- Integration eines Reset-Buttons für Standardwerte.


================================================
FILE: step08/README_step_08_ar.md
================================================

# 🎨 الخطوة 8 – تعديل مرئي لتنسيقات CSS داخل لوحة الإدارة

## 🎯 الهدف
استبدال إعدادات CSS بصيغة JSON بعناصر إدخال مرئية مثل القوائم المنسدلة ومنتقي الألوان – دون الحاجة لتعديل JSON يدويًا!

---

## ✅ الحقول المرئية المدعومة

| مفتاح الإعداد              | عناصر الإدخال                        |
|----------------------------|--------------------------------------|
| section_title_css          | حجم الخط، اللون، وزن الخط            |
| paragraph_css              | حجم الخط، اللون                      |
| body_font                  | نوع الخط (قائمة منسدلة)             |

---

## 📁 الملفات المعدّلة

```
step8/
├── routes/
│   └── admin_routes.py        # منطق موسع لمعالجة الحقول المرئية
├── templates/
│   └── admin/
│       └── settings.html      # عناصر إدخال مرئية بدلاً من Textarea
```

---

## 🖼️ مثال: `section_title_css`

```html
<select name="section_title_css_font_size">...</select>
<input type="color" name="section_title_css_color">
<select name="section_title_css_weight">...</select>
```

---

## 🖼️ مثال: `paragraph_css`

```html
<select name="paragraph_css_font_size">...</select>
<input type="color" name="paragraph_css_color">
```

---

## 🖼️ مثال: `body_font`

```html
<select name="body_font">
  <option value="Arial, sans-serif">Arial</option>
  <option value="Verdana, sans-serif">Verdana</option>
  ...
</select>
```

---

## ⚙️ المعالجة في `admin_routes.py`

- عند الإرسال (POST): يتم جمع القيم من الحقول المرئية وتجميعها في صيغة JSON (أو حفظها مباشرة).
- عند العرض (GET): يتم تحليل القيم وتحويلها إلى كائنات بيانات تُمرر إلى القالب.

---

## ▶️ تشغيل التطبيق

```bash
python run.py
```

ثم زيارة:
```
http://localhost:40505/admin/settings
```

---

## ✅ النتيجة

- يمكن للمشرفين الآن تعديل التنسيقات بسهولة من خلال واجهة مرئية.
- لا يوجد خطر ناتج عن JSON غير صحيح.
- التعديلات تنعكس مباشرة على صفحة السيرة الذاتية العامة `/resume`.

---

## 🔜 الخطوة التالية

- عرض مباشر (Live Preview) عند التعديل.
- دمج زر لإعادة القيم إلى الإعدادات الافتراضية.



================================================
FILE: step08/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40508)



================================================
FILE: step08/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step08/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step08/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step08/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            return redirect(url_for("admin.manage_settings"))

        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step08/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step08/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step08/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step08/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step08/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step08/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

    <!-- section_title_css -->
    <h3>section_title_css</h3>

    <label>📏 Font Size:</label>
    <select name="section_title_css_font_size">
        {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
            <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

    <br><br>

    <label>🔠 Font Weight:</label>
    <select name="section_title_css_weight">
        {% for w in ["normal", "bold", "lighter"] %}
            <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
        {% endfor %}
    </select>

    <hr>

    <!-- paragraph_css -->
    <h3>paragraph_css</h3>

    <label>📏 Font Size:</label>
    <select name="paragraph_css_font_size">
        {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
            <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

    <hr>

    <!-- باقي الإعدادات -->
    {% for setting in settings %}
        {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endif %}
    {% endfor %}

    <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step08/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step08/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step09/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step09/README_step_09.md
================================================

# Schritt 9 – Live-Vorschau der Lebenslauf-Stileinstellungen

## 🎯 Ziel
Integration einer **Live Preview**-Funktion, um Stiländerungen (CSS) direkt im Browser visuell zu testen, bevor sie gespeichert werden.

---

## 🆕 Struktur

```
templates/
└── admin/
    └── settings.html               # Mit eingebetteter Vorschau
```

---

## 🖥️ `templates/admin/settings.html`

Die Vorschau erscheint oberhalb des Einstellungsformulars:

```html
<h2>🔍 Live-Vorschau</h2>
<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">Beispiel-Titel</h2>
    <p id="preview-paragraph">Dies ist ein Beispielabschnitt mit Beispielinhalt für die Vorschau.</p>
</div>
```

Dazu ein eingebettetes `<script>` mit JavaScript:

```js
function updatePreview() {
    ...
}
document.addEventListener("DOMContentLoaded", () => {
    ...
});
```

Die JS-Funktion greift auf die Werte der Dropdowns und Farbwähler zu und passt die CSS-Stile des Vorschaukastens dynamisch an.

---

## 📜 Unterstützte Einstellungen mit Vorschau

| Einstellungsschlüssel   | Typ           | Visualisierung im Preview |
|-------------------------|----------------|-----------------------------|
| `section_title_css`     | Font Size, Color, Weight | ✅ |
| `paragraph_css`         | Font Size, Color         | ✅ |
| `body_font`             | Font Family              | ✅ |

---

## ▶️ Ergebnis

- Benutzer kann CSS-Werte direkt anpassen **und live sehen**, wie sich dies auf Titel und Absätze auswirkt.
- Funktioniert ohne Neuladen der Seite.
- Verbesserte Benutzerfreundlichkeit für Nicht-Programmierer.

---

## 📦 Beispiel zum Testen

Starte das Projekt:

```bash
python run.py
```

Rufe im Browser auf:

```
http://localhost:40505/admin/settings
```

Jetzt kannst du Farben, Größen und Schriftarten live ändern und visuell prüfen.

---

✅ **Die Vorschau zeigt sofortige Änderungen – speichere sie, wenn du zufrieden bist.**



================================================
FILE: step09/README_step_09_ar.md
================================================

# الخطوة 9 – المعاينة الحية لإعدادات تنسيق السيرة الذاتية

## 🎯 الهدف
دمج ميزة **المعاينة الحية (Live Preview)** لتجربة تغييرات CSS مباشرة في المتصفح قبل حفظها.

---

## 🆕 البنية

```
templates/
└── admin/
    └── settings.html               # تحتوي على المعاينة المضمنة
```

---

## 🖥️ `templates/admin/settings.html`

تظهر المعاينة أعلى نموذج الإعدادات:

```html
<h2>🔍 المعاينة الحية</h2>
<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">عنوان تجريبي</h2>
    <p id="preview-paragraph">هذا مثال لمقطع نصي تجريبي داخل المعاينة.</p>
</div>
```

مع تضمين سكربت JavaScript:

```js
function updatePreview() {
    ...
}
document.addEventListener("DOMContentLoaded", () => {
    ...
});
```

تقوم الدالة JS بقراءة القيم من القوائم المنسدلة ومنتقيات الألوان وتحديث CSS في صندوق المعاينة مباشرة.

---

## 📜 الإعدادات المدعومة في المعاينة

| مفتاح الإعداد              | النوع                | المعاينة |
|---------------------------|----------------------|----------|
| `section_title_css`       | حجم الخط، اللون، الوزن | ✅       |
| `paragraph_css`           | حجم الخط، اللون        | ✅       |
| `body_font`               | نوع الخط              | ✅       |

---

## ▶️ النتيجة

- يمكن للمستخدم تعديل إعدادات CSS ومشاهدة التأثير مباشرة على العناوين والمقاطع.
- بدون الحاجة لإعادة تحميل الصفحة.
- تجربة استخدام محسّنة، خاصة لغير المبرمجين.

---

## 📦 مثال للاختبار

ابدأ المشروع:

```bash
python run.py
```

ثم افتح في المتصفح:

```
http://localhost:40505/admin/settings
```

الآن يمكنك تعديل الألوان، الأحجام، وأنواع الخطوط ومعاينتها بشكل مباشر.

---

✅ **المعاينة تظهر التغييرات فورًا – يمكنك حفظها عندما تكون راضيًا عنها.**



================================================
FILE: step09/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40509)



================================================
FILE: step09/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step09/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step09/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step09/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            return redirect(url_for("admin.manage_settings"))

        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step09/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step09/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step09/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step09/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step09/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step09/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
<h2>🔍 Live-Vorschau</h2>

<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">Beispiel-Titel</h2>
    <p id="preview-paragraph">Dies ist ein Beispielabschnitt mit Beispielinhalt für die Vorschau.</p>
</div>

    <!-- section_title_css -->
    <h3>section_title_css</h3>

    <label>📏 Font Size:</label>
    <select name="section_title_css_font_size">
        {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
            <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

    <br><br>

    <label>🔠 Font Weight:</label>
    <select name="section_title_css_weight">
        {% for w in ["normal", "bold", "lighter"] %}
            <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
        {% endfor %}
    </select>

    <hr>

    <!-- paragraph_css -->
    <h3>paragraph_css</h3>

    <label>📏 Font Size:</label>
    <select name="paragraph_css_font_size">
        {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
            <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

    <hr>

    <!-- باقي الإعدادات -->
    {% for setting in settings %}
        {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endif %}
    {% endfor %}

    <button type="submit">💾 Änderungen speichern</button>
    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>


================================================
FILE: step09/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step09/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step10/__init__.py
================================================
from flask import Flask
from models.models import db
from routes.admin_routes import admin_bp
from routes.public_routes import public_bp


def create_app():
    app = Flask(__name__)
    app.config.from_object("config.settings.Config")

    db.init_app(app)

    from routes.main_routes import main_bp
    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    return app



================================================
FILE: step10/README_step_10.md
================================================
# ✅ Schritt 10 – "Speichern + Vorschau"-Button (Live Preview Button)

In diesem Schritt wurde ein zusätzlicher Button integriert, um die aktuelle CSS-Konfiguration zu speichern **und gleichzeitig eine Vorschau der Änderungen anzuzeigen**.

## 🔧 Änderungen im Template (`settings.html`)
Ein neuer Button wurde eingefügt:
```html
<button type="submit" name="action" value="save_and_preview">💾 Speichern + Vorschau anzeigen</button>
```

## 🧠 Logik im Python-Code (`admin_routes.py`)
Im POST-Abschnitt wurde geprüft, ob der Name des Buttons `"save_and_preview"` ist:

```python
if request.form.get("action") == "save_and_preview":
    return redirect(url_for("public.resume"))
```

Dadurch wird der Benutzer nach dem Speichern automatisch auf die Seite `/resume` weitergeleitet, um die neue Darstellung live zu sehen.

## ✅ Vorteil:
- Bessere Benutzererfahrung für Administratoren.
- Spart Zeit beim Anpassen und Testen des Designs.


================================================
FILE: step10/README_step_10_ar.md
================================================

# ✅ الخطوة 10 – زر "حفظ + معاينة" (Live Preview Button)

في هذه الخطوة، تم دمج زر إضافي يسمح بحفظ إعدادات CSS الحالية **مع عرض المعاينة مباشرة** بعد الحفظ.

---

## 🔧 التعديلات داخل القالب (`settings.html`)
تمت إضافة زر جديد:

```html
<button type="submit" name="action" value="save_and_preview">💾 حفظ + عرض المعاينة</button>
```

---

## 🧠 المنطق داخل كود بايثون (`admin_routes.py`)
في قسم POST، يتم التحقق مما إذا كان اسم الزر هو `"save_and_preview"`:

```python
if request.form.get("action") == "save_and_preview":
    return redirect(url_for("public.resume"))
```

وبذلك يتم توجيه المستخدم تلقائيًا إلى صفحة `/resume` بعد الحفظ، لمشاهدة الشكل الجديد مباشرة.

---

## ✅ الفائدة:
- تجربة مستخدم أفضل للمشرفين.
- يوفر الوقت عند تعديل واختبار التصميم.



================================================
FILE: step10/run.py
================================================
# run.py

from __init__ import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40510)



================================================
FILE: step10/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step10/logic/builder.py
================================================
import json
from models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step10/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step10/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            action = request.form.get("action")
            if action == "save_and_preview":
                return redirect(url_for("public.resume"))
            return redirect(url_for("admin.manage_settings"))


        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step10/routes/main_routes.py
================================================
# routes/main_routes.py

from flask import Blueprint, render_template

main_bp = Blueprint("main", __name__)

@main_bp.route("/")
def home():
    return render_template("home.html")



================================================
FILE: step10/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from models.models import Section
from logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step10/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step10/templates/home.html
================================================
<!-- templates/home.html -->

<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf Projekt</title>
</head>
<body>
    <h1>✅ Lebenslauf Projekt gestartet erfolgreich!</h1>
</body>
</html>



================================================
FILE: step10/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Abschnitte verwalten</title>
</head>
<body>
    <h1>📝 Lebenslauf-Abschnitte bearbeiten</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 Änderungen speichern</button>
    </form>
</body>
</html>



================================================
FILE: step10/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>CSS-Einstellungen bearbeiten</title>
</head>
<body>
    <h1>🎨 Lebenslauf-Stileinstellungen</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
<h2>🔍 Live-Vorschau</h2>

<div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
    <h2 id="preview-title">Beispiel-Titel</h2>
    <p id="preview-paragraph">Dies ist ein Beispielabschnitt mit Beispielinhalt für die Vorschau.</p>
</div>

    <!-- section_title_css -->
    <h3>section_title_css</h3>

    <label>📏 Font Size:</label>
    <select name="section_title_css_font_size">
        {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
            <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

    <br><br>

    <label>🔠 Font Weight:</label>
    <select name="section_title_css_weight">
        {% for w in ["normal", "bold", "lighter"] %}
            <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
        {% endfor %}
    </select>

    <hr>

    <!-- paragraph_css -->
    <h3>paragraph_css</h3>

    <label>📏 Font Size:</label>
    <select name="paragraph_css_font_size">
        {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
            <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
        {% endfor %}
    </select>

    <br><br>

    <label>🎨 Color:</label>
    <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

    <hr>

    <!-- باقي الإعدادات -->
    {% for setting in settings %}
        {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
            <h3>{{ setting.key }}</h3>
            <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
            <hr>
        {% endif %}
    {% endfor %}


    <button type="submit" name="action" value="save">💾 Änderungen speichern</button>
    <button type="submit" name="action" value="save_and_preview">💾 Speichern + Vorschau anzeigen</button>


    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>


================================================
FILE: step10/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <title>Lebenslauf</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 Mein Lebenslauf</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ section.title }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ section.content }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step10/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step11/__init__.py
================================================
from flask import Flask
from .models.models import db
from .routes.admin_routes import admin_bp
from .routes.public_routes import public_bp
from .routes.main_routes import main_bp
from .extensions import babel  # هذا يجب أن يأتي بعد Flask
from .i18n_runtime import init_i18n
import os
from flask_babel import get_locale
from flask_babel import _


def create_app():
    app = Flask(__name__)
    app.config.from_object("step11.config.settings.Config")
    app.config['LANGUAGES'] = ['de', 'en', 'ar']
    app.debug = True

    import logging
    logging.basicConfig(level=logging.DEBUG)
    app.logger.setLevel(logging.DEBUG)

    db.init_app(app)

    # ✅ التهيئة اليدوية للمسار
    translations_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'translations'))
    app.config['BABEL_TRANSLATION_DIRECTORIES'] = translations_path
    babel.init_app(app)

    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    init_i18n(app)

    @app.before_request
    def log_locale_info():
        print("🌐 Requested locale:", get_locale())
        print("📦 Babel directory:", app.config.get('BABEL_TRANSLATION_DIRECTORIES'))

    return app



================================================
FILE: step11/babel.cfg
================================================
[python: **.py]
[jinja2: **/templates/**.html]
extensions=jinja2.ext.do

ignore_dirs = venv



================================================
FILE: step11/extensions.py
================================================
# step11/extensions.py
from flask_babel import Babel

# ✅ أنشئ الكائن بدون باراميترات
babel = Babel()



================================================
FILE: step11/i18n_runtime.py
================================================
from flask import request
from flask_babel import gettext
from .extensions import babel

# ✅ دالة مستقلة يمكن استيرادها
def get_locale():
    lang = request.args.get("lang")
    print("📥 lang param:", lang)
    if lang in ['de', 'en', 'ar']:
        return lang
    return request.accept_languages.best_match(['de', 'en', 'ar'])

def init_i18n(app):
    # ✅ اربطها هنا
    babel.locale_selector_func = get_locale

    @app.context_processor
    def inject_get_locale():
        return dict(get_locale=get_locale)

    @app.context_processor
    def inject_translation():
        return dict(gettext=gettext)



================================================
FILE: step11/i18n_translate.py
================================================
import os
import re
import subprocess
from pathlib import Path
from flask import request
from deep_translator import GoogleTranslator
from .extensions import babel




# ----------- إعدادات المسارات ----------
STEP_DIR = Path(__file__).resolve().parent
BABEL_CFG = os.path.join(STEP_DIR, "babel.cfg")
OUTPUT_DIR = STEP_DIR / "translations"
POT_FILE = STEP_DIR / "messages.pot"
LANGUAGES = ["ar", "de"]

# ----------------------------------------


def fix_placeholders(msgid, translated):
    patterns = [
        re.compile(r"%\([^)]+\)s"),    # مثل %(name)s
        re.compile(r"\{[^}]+\}")       # مثل {value}
    ]
    for pattern in patterns:
        placeholders = pattern.findall(msgid)
        for ph in placeholders:
            corrupted_regex = re.compile(rf"%\s*\(\s*{re.escape(ph[2:-2])}\s*\)\s*s", re.IGNORECASE)
            translated = corrupted_regex.sub('', translated)
            if ph not in translated:
                print(f"⚠️ Missing placeholder {ph} in translation → fixing.")
                translated = translated.strip()
                if not translated.endswith(ph):
                    translated += f" {ph}"
    return translated


def read_pot_file(path):
    return path.read_text(encoding="utf-8").splitlines()


def init_translators(langs):
    return {lang: GoogleTranslator(source='en', target=lang) for lang in langs}


def add_po_header(lines, lang):
    header = [
        'msgid ""',
        'msgstr ""',
        '"Content-Type: text/plain; charset=UTF-8\\n"',
        f'"Language: {lang}\\n"',
        ""
    ]
    return header + lines


def is_english(text):
    return re.search(r'[a-zA-Z]', text) and not re.search(r'[ء-ي]', text)

def translate_lines(lines, translators):
    msgid = None
    translated_content = {lang: [] for lang in translators}

    for line in lines:
        if 'fuzzy' in line:
            continue
        if line.startswith('msgid '):
            msgid_raw = line[6:].strip().strip('"')
            if not is_english(msgid_raw):
                msgid = None
                for lang in translators:
                    translated_content[lang].append(line)
                    translated_content[lang].append('msgstr ""')
                continue
            msgid = msgid_raw
            msgid = line[6:].strip().strip('"')
            for lang in translators:
                translated_content[lang].append(line)
        elif line.strip() == 'msgstr ""' and msgid:
            for lang, translator in translators.items():
                try:
                    translated = translator.translate(msgid)
                    if not translated.strip():
                        print(f"Warning [{lang}] Empty translation for: {msgid}")
                    translated = fix_placeholders(msgid, translated)
                    translated_content[lang].append(f'msgstr "{translated}"')
                    print(f"Translated [{lang}] {msgid} → {translated}")
                except Exception as e:
                    translated_content[lang].append('msgstr ""')
                    print(f"Error [{lang}] translating '{msgid}': {e}")
            msgid = None
        else:
            for lang in translators:
                translated_content[lang].append(line)
    return translated_content


def save_translations(translated_content, base_output_dir):
    for lang, lines in translated_content.items():
        lines = add_po_header(lines, lang)
        path = Path(base_output_dir) / lang / "LC_MESSAGES" / "messages.po"
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text("\n".join(lines), encoding="utf-8")
        print(f"Saved [{lang}] to {path}")


def generate_pot_file():
    print("Extracting phrases to .pot file ...")
    subprocess.run(["pybabel", "extract", "-F", BABEL_CFG, "-o", POT_FILE, STEP_DIR], check=True)


def init_po_files(languages):
    for lang in languages:
        po_path = Path(OUTPUT_DIR) / lang / "LC_MESSAGES" / "messages.po"
        if not po_path.exists():
            print(f"Initializing file for [{lang}] ...")
            subprocess.run(["pybabel", "init", "-i", POT_FILE, "-d", OUTPUT_DIR, "-l", lang], check=True)
        else:
            print(f"Translation file already exists for [{lang}]")


def compile_translations():
    try:
        subprocess.run(["pybabel", "compile", "-d", OUTPUT_DIR], check=True)
        print("✅ Compiled translations to .mo files.")
    except subprocess.CalledProcessError as e:
        print("❌ Error compiling .mo files:", e)


def main():
    generate_pot_file()
    init_po_files(LANGUAGES)

    if not Path(POT_FILE).exists():
        print(f"{POT_FILE} not found after extraction.")
        return

    lines = read_pot_file(Path(POT_FILE))
    translators = init_translators(LANGUAGES)
    translated_content = translate_lines(lines, translators)
    save_translations(translated_content, OUTPUT_DIR)
    compile_translations()

    if Path(POT_FILE).exists():
        Path(POT_FILE).unlink()
        print("🧹 Temporary messages.pot file deleted.")



if __name__ == "__main__":
    main()



================================================
FILE: step11/README_step_11.md
================================================
# 🧩 Schritt 11 – Internationalisierung (i18n) + Dynamische Styles

Dies ist der elfte Schritt des Projekts **lebenslauf**, in dem wir die mehrsprachige Unterstützung (i18n) sowie dynamische CSS-Stile erfolgreich integriert haben.

---

## ✅ Funktionen in diesem Schritt

### 🌍 Mehrsprachigkeit (i18n)
- Unterstützung für **Deutsch 🇩🇪**, **Englisch 🇬🇧**, **Arabisch 🇸🇦**
- Wechsel der Sprache über URL-Parameter: `?lang=de`, `?lang=en`, `?lang=ar`
- Automatische Fallback-Sprache basierend auf `Accept-Language`
- Integration von Flask-Babel 4.0
- Verwendung von `force_locale()` zur erzwungenen Sprachumschaltung
- Übersetzbare Templates mit `gettext`, `_()` und `{{ _('Text') }}`

### 🎨 Dynamische CSS-Stile
- CSS-Konfigurationen (`section_title_css`, `paragraph_css`) aus der Datenbank
- Live-Vorschau in `settings.html` (Adminbereich)
- Visual CSS Editing via Input-Felder (z. B. Font Size, Color, Weight)

---

## 🛠️ Struktur

```bash
step11/
├── config/
├── logic/
├── models/
├── routes/
│   ├── admin_routes.py
│   ├── main_routes.py   # enthält force_locale + gettext
│   └── public_routes.py
├── static/css/resume.css
├── templates/
│   ├── home.html
│   ├── admin/sections.html
│   └── admin/settings.html
├── translations/
│   ├── de/LC_MESSAGES/messages.po
│   ├── ar/LC_MESSAGES/messages.po
├── i18n_runtime.py
├── extensions.py
├── run.py
```

---

## 🚀 Schnellstart

```bash
# Virtuelle Umgebung aktivieren
.env\Scripts\Activate

# Flask starten
$env:FLASK_APP = "step11:create_app"
flask run
```

Dann öffne deinen Browser:

```
http://127.0.0.1:5000/?lang=de
```

---

## 📁 Übersetzungen bearbeiten

```bash
pybabel extract -F babel.cfg -o messages.pot .
pybabel update -i messages.pot -d translations -l ar
pybabel compile -d translations
```

---

## 🔮 Nächste Schritte (Empfohlen)

- [ ] Sprache in `session` speichern statt in `?lang=`
- [ ] Dropdown für Sprachauswahl in Navbar
- [ ] Vollständige Übersetzung von Adminseiten
- [ ] Live-Aktualisierung der CSS-Vorschau (JavaScript)

---

## 🧠 Autor
**TamerOnLine** – [github.com/TamerOnLine](https://github.com/TamerOnLine)


================================================
FILE: step11/README_step_11_ar.md
================================================

# 🧩 الخطوة 11 – الترجمة (i18n) + التنسيقات الديناميكية

هذه هي الخطوة الحادية عشرة من مشروع **السيرة الذاتية (lebenslauf)**، حيث تم دمج دعم التعدد اللغوي (i18n) بالإضافة إلى تنسيقات CSS الديناميكية بنجاح.

---

## ✅ الميزات في هذه الخطوة

### 🌍 الترجمة (i18n)
- دعم اللغات: **الألمانية 🇩🇪**، **الإنجليزية 🇬🇧**، **العربية 🇸🇦**
- تغيير اللغة عبر معامل URL مثل: `?lang=de` أو `?lang=en` أو `?lang=ar`
- لغة افتراضية يتم تحديدها تلقائيًا بناءً على `Accept-Language`
- دمج مكتبة Flask-Babel 4.0
- استخدام `force_locale()` لتحديد اللغة يدويًا
- استخدام `gettext` و `_()` و `{{ _('النص') }}` داخل القوالب

### 🎨 تنسيقات CSS ديناميكية
- تحميل إعدادات CSS (`section_title_css`، `paragraph_css`) من قاعدة البيانات
- معاينة حية داخل صفحة `settings.html` في لوحة الإدارة
- تعديل مرئي للإعدادات عبر حقول إدخال مثل: حجم الخط، اللون، الوزن

---

## 🛠️ البنية

```bash
step11/
├── config/
├── logic/
├── models/
├── routes/
│   ├── admin_routes.py
│   ├── main_routes.py   # يحتوي على force_locale و gettext
│   └── public_routes.py
├── static/css/resume.css
├── templates/
│   ├── home.html
│   ├── admin/sections.html
│   └── admin/settings.html
├── translations/
│   ├── de/LC_MESSAGES/messages.po
│   ├── ar/LC_MESSAGES/messages.po
├── i18n_runtime.py
├── extensions.py
├── run.py
```

---

## 🚀 التشغيل السريع

```bash
# تفعيل البيئة الافتراضية
.\env\Scripts\Activate

# تشغيل Flask
$env:FLASK_APP = "step11:create_app"
flask run
```

ثم افتح المتصفح:

```
http://127.0.0.1:5000/?lang=de
```

---

## 📁 تعديل الترجمات

```bash
pybabel extract -F babel.cfg -o messages.pot .
pybabel update -i messages.pot -d translations -l ar
pybabel compile -d translations
```

---

## 🔮 الخطوات التالية (مقترحة)

- [ ] حفظ اللغة المختارة داخل `session` بدلاً من URL
- [ ] إضافة قائمة منسدلة لاختيار اللغة داخل الشريط العلوي
- [ ] ترجمة كاملة لجميع صفحات الإدارة
- [ ] تحديث فوري للمعاينة عبر JavaScript

---

## 🧠 المؤلف
**TamerOnLine** – [github.com/TamerOnLine](https://github.com/TamerOnLine)



================================================
FILE: step11/run.py
================================================
# run.py

from step11 import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=40511)



================================================
FILE: step11/config/__init__.py
================================================



================================================
FILE: step11/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step11/logic/__init__.py
================================================



================================================
FILE: step11/logic/builder.py
================================================
import json
from ..models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step11/models/__init__.py
================================================



================================================
FILE: step11/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step11/routes/__init__.py
================================================



================================================
FILE: step11/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from ..models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            action = request.form.get("action")
            if action == "save_and_preview":
                return redirect(url_for("public.resume"))
            return redirect(url_for("admin.manage_settings"))


        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step11/routes/main_routes.py
================================================
from flask import Blueprint, request, render_template
from flask_babel import _
from flask_babel import force_locale
from ..i18n_runtime import get_locale

main_bp = Blueprint("main", __name__)


@main_bp.route("/")
def home():
    lang = get_locale()
    with force_locale(lang):
        print("🌐 Forced locale:", lang)
        return render_template("home.html", test=_("Select language:"))



================================================
FILE: step11/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from ..models.models import Section
from ..logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step11/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step11/templates/home.html
================================================
<!DOCTYPE html>
<html lang="{{ get_locale() }}">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Resume Project') }}</title>
</head>
<body>
    <h1>✅ {{ _('Resume Project gestartet erfolgreich!') }}</h1>
    <p>{{ _('Welcome to your multilingual resume application.') }}</p>

    <p>🌐 Detected locale: {{ get_locale() }}</p>
    <p>🔁 Translated: {{ _('Select language:') }}</p>

    <hr>

    <p>{{ _('Select language:') }}</p>
    <ul>
        <li><a href="{{ url_for('main.home') }}?lang=de">🇩🇪 Deutsch</a></li>
        <li><a href="{{ url_for('main.home') }}?lang=en">🇬🇧 English</a></li>
        <li><a href="{{ url_for('main.home') }}?lang=ar">🇸🇦 العربية</a></li>
    </ul>
</body>
</html>



================================================
FILE: step11/templates/admin/sections.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Manage Sections') }}</title>
</head>
<body>
    <h1>📝 {{ _('Edit Resume Sections') }}</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 {{ _('Save Changes') }}</button>
    </form>
</body>
</html>



================================================
FILE: step11/templates/admin/settings.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Edit CSS Settings') }}</title>
</head>
<body>
    <h1>🎨 {{ _('Resume Style Settings') }}</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
        <h2>🔍 {{ _('Live Preview') }}</h2>

        <div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
            <h2 id="preview-title">{{ _('Example Title') }}</h2>
            <p id="preview-paragraph">{{ _('This is a sample section with example content.') }}</p>
        </div>

        <!-- section_title_css -->
        <h3>{{ _('section_title_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="section_title_css_font_size">
            {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
                <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

        <br><br>

        <label>🔠 {{ _('Font Weight') }}:</label>
        <select name="section_title_css_weight">
            {% for w in ["normal", "bold", "lighter"] %}
                <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
            {% endfor %}
        </select>

        <hr>

        <!-- paragraph_css -->
        <h3>{{ _('paragraph_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="paragraph_css_font_size">
            {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
                <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

        <hr>

        <!-- Other settings -->
        {% for setting in settings %}
            {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
                <h3>{{ _(setting.key) }}</h3>
                <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
                <hr>
            {% endif %}
        {% endfor %}

        <button type="submit" name="action" value="save">💾 {{ _('Save Changes') }}</button>
        <button type="submit" name="action" value="save_and_preview">💾 {{ _('Save & Show Preview') }}</button>

    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>



================================================
FILE: step11/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Resume') }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 {{ _('My Resume') }}</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ _(section.title) }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ _(section.content) }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step11/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step11/translations/ar/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: ar\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "حدد اللغة:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "استئناف المشروع"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "استئناف مشروع الجستارت erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "مرحبًا بك في تطبيق السيرة الذاتية متعددة اللغات."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "إدارة الأقسام"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "تحرير الأقسام السيرة الذاتية"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "حفظ التغييرات"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "تحرير إعدادات CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "استئناف إعدادات النمط"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "معاينة حية"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "مثال العنوان"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "هذا قسم عينة مع مثال محتوى."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "section_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "حجم الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "لون"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "وزن الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "الفقرة"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "معاينة حفظ وإظهار"



================================================
FILE: step11/translations/de/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: de\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "Sprache auswählen:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "Projekt wieder aufnehmen"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "Lebenslauf Projekt Gestartett Erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "Willkommen bei Ihrer mehrsprachigen Lebenslaufanwendung."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "Abschnitte verwalten"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "Lebenslaufabschnitte bearbeiten"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "Änderungen speichern"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "Bearbeiten Sie die CSS -Einstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "Lebenslauf -Stileinstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "Live -Vorschau"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "Beispieltitel"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "Dies ist ein Beispielabschnitt mit Beispielinhalt."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "Abschnitt_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "Schriftgröße"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "Farbe"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "Schriftgewicht"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "Abschnitt_CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "Vorschau speichern und anzeigen"



================================================
FILE: step12/__init__.py
================================================
from flask import Flask
from .models.models import db
from .routes.admin_routes import admin_bp
from .routes.public_routes import public_bp
from .routes.main_routes import main_bp
from .extensions import babel  # هذا يجب أن يأتي بعد Flask
from .i18n_runtime import init_i18n
import os
from flask_babel import get_locale
from flask_babel import _


def create_app():
    app = Flask(__name__)
    app.config.from_object("step11.config.settings.Config")
    app.config['LANGUAGES'] = ['de', 'en', 'ar']
    app.debug = True

    import logging
    logging.basicConfig(level=logging.DEBUG)
    app.logger.setLevel(logging.DEBUG)

    db.init_app(app)

    # ✅ التهيئة اليدوية للمسار
    translations_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'translations'))
    app.config['BABEL_TRANSLATION_DIRECTORIES'] = translations_path
    babel.init_app(app)

    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    init_i18n(app)

    @app.before_request
    def log_locale_info():
        print("🌐 Requested locale:", get_locale())
        print("📦 Babel directory:", app.config.get('BABEL_TRANSLATION_DIRECTORIES'))

    return app



================================================
FILE: step12/babel.cfg
================================================
[python: **.py]
[jinja2: **/templates/**.html]
extensions=jinja2.ext.do

ignore_dirs = venv



================================================
FILE: step12/extensions.py
================================================
# step11/extensions.py
from flask_babel import Babel

# ✅ أنشئ الكائن بدون باراميترات
babel = Babel()



================================================
FILE: step12/i18n_runtime.py
================================================
from flask import request
from flask_babel import gettext
from .extensions import babel

# ✅ دالة مستقلة يمكن استيرادها
def get_locale():
    lang = request.args.get("lang")
    print("📥 lang param:", lang)
    if lang in ['de', 'en', 'ar']:
        return lang
    return request.accept_languages.best_match(['de', 'en', 'ar'])

def init_i18n(app):
    # ✅ اربطها هنا
    babel.locale_selector_func = get_locale

    @app.context_processor
    def inject_get_locale():
        return dict(get_locale=get_locale)

    @app.context_processor
    def inject_translation():
        return dict(gettext=gettext)



================================================
FILE: step12/i18n_translate.py
================================================
import os
import re
import subprocess
from pathlib import Path
from flask import request
from deep_translator import GoogleTranslator
from .extensions import babel




# ----------- إعدادات المسارات ----------
STEP_DIR = Path(__file__).resolve().parent
BABEL_CFG = os.path.join(STEP_DIR, "babel.cfg")
OUTPUT_DIR = STEP_DIR / "translations"
POT_FILE = STEP_DIR / "messages.pot"
LANGUAGES = ["ar", "de"]

# ----------------------------------------


def fix_placeholders(msgid, translated):
    patterns = [
        re.compile(r"%\([^)]+\)s"),    # مثل %(name)s
        re.compile(r"\{[^}]+\}")       # مثل {value}
    ]
    for pattern in patterns:
        placeholders = pattern.findall(msgid)
        for ph in placeholders:
            corrupted_regex = re.compile(rf"%\s*\(\s*{re.escape(ph[2:-2])}\s*\)\s*s", re.IGNORECASE)
            translated = corrupted_regex.sub('', translated)
            if ph not in translated:
                print(f"⚠️ Missing placeholder {ph} in translation → fixing.")
                translated = translated.strip()
                if not translated.endswith(ph):
                    translated += f" {ph}"
    return translated


def read_pot_file(path):
    return path.read_text(encoding="utf-8").splitlines()


def init_translators(langs):
    return {lang: GoogleTranslator(source='en', target=lang) for lang in langs}


def add_po_header(lines, lang):
    header = [
        'msgid ""',
        'msgstr ""',
        '"Content-Type: text/plain; charset=UTF-8\\n"',
        f'"Language: {lang}\\n"',
        ""
    ]
    return header + lines


def is_english(text):
    return re.search(r'[a-zA-Z]', text) and not re.search(r'[ء-ي]', text)

def translate_lines(lines, translators):
    msgid = None
    translated_content = {lang: [] for lang in translators}

    for line in lines:
        if 'fuzzy' in line:
            continue
        if line.startswith('msgid '):
            msgid_raw = line[6:].strip().strip('"')
            if not is_english(msgid_raw):
                msgid = None
                for lang in translators:
                    translated_content[lang].append(line)
                    translated_content[lang].append('msgstr ""')
                continue
            msgid = msgid_raw
            msgid = line[6:].strip().strip('"')
            for lang in translators:
                translated_content[lang].append(line)
        elif line.strip() == 'msgstr ""' and msgid:
            for lang, translator in translators.items():
                try:
                    translated = translator.translate(msgid)
                    if not translated.strip():
                        print(f"Warning [{lang}] Empty translation for: {msgid}")
                    translated = fix_placeholders(msgid, translated)
                    translated_content[lang].append(f'msgstr "{translated}"')
                    print(f"Translated [{lang}] {msgid} → {translated}")
                except Exception as e:
                    translated_content[lang].append('msgstr ""')
                    print(f"Error [{lang}] translating '{msgid}': {e}")
            msgid = None
        else:
            for lang in translators:
                translated_content[lang].append(line)
    return translated_content


def save_translations(translated_content, base_output_dir):
    for lang, lines in translated_content.items():
        lines = add_po_header(lines, lang)
        path = Path(base_output_dir) / lang / "LC_MESSAGES" / "messages.po"
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text("\n".join(lines), encoding="utf-8")
        print(f"Saved [{lang}] to {path}")


def generate_pot_file():
    print("Extracting phrases to .pot file ...")
    subprocess.run(["pybabel", "extract", "-F", BABEL_CFG, "-o", POT_FILE, STEP_DIR], check=True)


def init_po_files(languages):
    for lang in languages:
        po_path = Path(OUTPUT_DIR) / lang / "LC_MESSAGES" / "messages.po"
        if not po_path.exists():
            print(f"Initializing file for [{lang}] ...")
            subprocess.run(["pybabel", "init", "-i", POT_FILE, "-d", OUTPUT_DIR, "-l", lang], check=True)
        else:
            print(f"Translation file already exists for [{lang}]")


def compile_translations():
    try:
        subprocess.run(["pybabel", "compile", "-d", OUTPUT_DIR], check=True)
        print("✅ Compiled translations to .mo files.")
    except subprocess.CalledProcessError as e:
        print("❌ Error compiling .mo files:", e)


def main():
    generate_pot_file()
    init_po_files(LANGUAGES)

    if not Path(POT_FILE).exists():
        print(f"{POT_FILE} not found after extraction.")
        return

    lines = read_pot_file(Path(POT_FILE))
    translators = init_translators(LANGUAGES)
    translated_content = translate_lines(lines, translators)
    save_translations(translated_content, OUTPUT_DIR)
    compile_translations()

    if Path(POT_FILE).exists():
        Path(POT_FILE).unlink()
        print("🧹 Temporary messages.pot file deleted.")



if __name__ == "__main__":
    main()



================================================
FILE: step12/README_step_12.md
================================================

# ✅ Step 12 – Unifying Page Design Using a Base Template

In this step, we implemented a unified design across all project pages by creating:

---

## 📁 Added Files:

- `base.html.j2`: The main base template for all pages.
- `partials/navbar.html.j2`: A unified top navigation bar.
- `partials/footer.html.j2`: A unified footer.

---

## 🧩 Implemented Features:

| Feature                     | Status |
|----------------------------|--------|
| Unified Navbar             | ✅     |
| Unified Footer             | ✅     |
| `.j2` extension for templates | ✅     |
| `home.html.j2` inherits from `base.html.j2` | ✅ |
| Fixed `TemplateNotFound` errors | ✅ |

---

## 🚀 Recommended Way to Run the Server:

```bash
# From the project root directory:
python -m step12.run
```

> Make sure `run.py` contains:
```python
from step12 import create_app
```

---

## ⚠️ Important Note:

If you see the message:
```
sqlalchemy.exc.OperationalError: no such table: section
```

📌 It means the database tables have not been created yet.  
In the next step `step13`, automatic table creation will be implemented inside `create_app()`.

---



================================================
FILE: step12/README_step_12_ar.md
================================================
# ✅ Step 12 – توحيد تصميم الصفحات باستخدام Base Template

في هذه الخطوة، قمنا بتنفيذ تصميم موحد لجميع صفحات المشروع من خلال إنشاء:

---

## 📁 الملفات المضافة:

- `base.html.j2`: القالب الأساسي لجميع الصفحات.
- `partials/navbar.html.j2`: شريط أدوات علوي موحد.
- `partials/footer.html.j2`: تذييل سفلي موحد.

---

## 🧩 الميزات التي تم تنفيذها:

| الميزة | الحالة |
|--------|--------|
| شريط أدوات (Navbar) موحد | ✅ |
| تذييل (Footer) موحد | ✅ |
| اعتماد الامتداد `.j2` لجميع القوالب | ✅ |
| تعديل `home.html.j2` ليرث من `base.html.j2` | ✅ |
| إصلاح مشاكل `TemplateNotFound` | ✅ |

---

## 🚀 طريقة تشغيل السيرفر (موصى بها):

```bash
# من مجلد المشروع الجذري:
python -m step12.run
```

> تأكد أن `run.py` يحتوي على:
```python
from step12 import create_app
```

---

## ⚠️ ملاحظة مهمة:

إذا ظهرت رسالة:
```
sqlalchemy.exc.OperationalError: no such table: section
```

📌 هذا يعني أن الجداول غير منشأة بعد.  
في الخطوة القادمة `step13`، سيتم تنفيذ إنشاء تلقائي للجداول داخل `create_app()`.

---


================================================
FILE: step12/run.py
================================================
# step12/run.py

from step12 import create_app

app = create_app()

if __name__ == "__main__":
    app.run(
        host="0.0.0.0",   # أو "127.0.0.1" إذا أردت تشغيله محليًا فقط
        port=40512,       # يمكنك تغييره حسب ما يناسبك
        debug=True        # اجعلها False في الإنتاج
    )



================================================
FILE: step12/config/__init__.py
================================================



================================================
FILE: step12/config/settings.py
================================================
# config/settings.py

import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///lebenslauf.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step12/logic/__init__.py
================================================



================================================
FILE: step12/logic/builder.py
================================================
import json
from ..models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step12/models/__init__.py
================================================



================================================
FILE: step12/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step12/routes/__init__.py
================================================



================================================
FILE: step12/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from ..models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            action = request.form.get("action")
            if action == "save_and_preview":
                return redirect(url_for("public.resume"))
            return redirect(url_for("admin.manage_settings"))


        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step12/routes/main_routes.py
================================================
from flask import Blueprint, request, render_template
from flask_babel import _
from flask_babel import force_locale
from ..i18n_runtime import get_locale

main_bp = Blueprint("main", __name__)


@main_bp.route("/")
def home():
    lang = get_locale()
    with force_locale(lang):
        print("🌐 Forced locale:", lang)
        return render_template("home.html.j2", test=_("Select language:"))



================================================
FILE: step12/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from ..models.models import Section
from ..logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step12/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step12/templates/base.html.j2
================================================
<!DOCTYPE html>
<html lang="{{ get_locale() }}">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{{ _('Resume Project') }}{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font | default('font-family: Arial, sans-serif;') }}">

    {% include 'partials/navbar.html.j2' %}

    <main style="padding: 20px;">
        {% block content %}{% endblock %}
    </main>

    {% include 'partials/footer.html.j2' %}

</body>
</html>



================================================
FILE: step12/templates/home.html.j2
================================================
{% extends 'base.html.j2' %}

{% block content %}
    <h1>✅ {{ _('Resume Project gestartet erfolgreich!') }}</h1>
    <p>{{ _('Welcome to your multilingual resume application.') }}</p>
{% endblock %}



================================================
FILE: step12/templates/admin/sections.html.j2
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Manage Sections') }}</title>
</head>
<body>
    <h1>📝 {{ _('Edit Resume Sections') }}</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 {{ _('Save Changes') }}</button>
    </form>
</body>
</html>



================================================
FILE: step12/templates/admin/settings.html.j2
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Edit CSS Settings') }}</title>
</head>
<body>
    <h1>🎨 {{ _('Resume Style Settings') }}</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
        <h2>🔍 {{ _('Live Preview') }}</h2>

        <div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
            <h2 id="preview-title">{{ _('Example Title') }}</h2>
            <p id="preview-paragraph">{{ _('This is a sample section with example content.') }}</p>
        </div>

        <!-- section_title_css -->
        <h3>{{ _('section_title_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="section_title_css_font_size">
            {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
                <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

        <br><br>

        <label>🔠 {{ _('Font Weight') }}:</label>
        <select name="section_title_css_weight">
            {% for w in ["normal", "bold", "lighter"] %}
                <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
            {% endfor %}
        </select>

        <hr>

        <!-- paragraph_css -->
        <h3>{{ _('paragraph_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="paragraph_css_font_size">
            {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
                <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

        <hr>

        <!-- Other settings -->
        {% for setting in settings %}
            {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
                <h3>{{ _(setting.key) }}</h3>
                <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
                <hr>
            {% endif %}
        {% endfor %}

        <button type="submit" name="action" value="save">💾 {{ _('Save Changes') }}</button>
        <button type="submit" name="action" value="save_and_preview">💾 {{ _('Save & Show Preview') }}</button>

    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
</body>
</html>



================================================
FILE: step12/templates/partials/footer.html.j2
================================================
<footer style="background: #eee; text-align: center; padding: 20px; margin-top: 40px; font-size: 14px;">
    © 2025 lebenslauf | {{ _('All rights reserved.') }}
</footer>



================================================
FILE: step12/templates/partials/navbar.html.j2
================================================
<nav style="background: #333; color: white; padding: 10px 20px;">
    <a href="{{ url_for('main.home') }}" style="color: white; margin-right: 20px;">🏠 {{ _('Home') }}</a>
    <a href="{{ url_for('admin.manage_sections') }}" style="color: white; margin-right: 20px;">📝 {{ _('Sections') }}</a>
    <a href="{{ url_for('admin.manage_settings') }}" style="color: white; margin-right: 20px;">🎨 {{ _('Settings') }}</a>
    <a href="{{ url_for('public.resume') }}" style="color: white; margin-right: 20px;">📄 {{ _('Resume') }}</a>

    <span style="float: right;">
        <a href="?lang=ar" style="color: white; margin-left: 10px;">🇸🇦</a>
        <a href="?lang=en" style="color: white; margin-left: 10px;">🇺🇸</a>
        <a href="?lang=de" style="color: white; margin-left: 10px;">🇩🇪</a>
    </span>
</nav>



================================================
FILE: step12/templates/public/resume.html.j2
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{{ _('Resume') }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font }}">
    <h1>📄 {{ _('My Resume') }}</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ _(section.title) }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ _(section.content) }}</div>
    {% endfor %}
</body>
</html>



================================================
FILE: step12/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step12/translations/ar/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: ar\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "حدد اللغة:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "استئناف المشروع"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "استئناف مشروع الجستارت erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "مرحبًا بك في تطبيق السيرة الذاتية متعددة اللغات."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "إدارة الأقسام"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "تحرير الأقسام السيرة الذاتية"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "حفظ التغييرات"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "تحرير إعدادات CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "استئناف إعدادات النمط"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "معاينة حية"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "مثال العنوان"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "هذا قسم عينة مع مثال محتوى."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "section_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "حجم الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "لون"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "وزن الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "الفقرة"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "معاينة حفظ وإظهار"



================================================
FILE: step12/translations/de/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: de\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "Sprache auswählen:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "Projekt wieder aufnehmen"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "Lebenslauf Projekt Gestartett Erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "Willkommen bei Ihrer mehrsprachigen Lebenslaufanwendung."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "Abschnitte verwalten"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "Lebenslaufabschnitte bearbeiten"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "Änderungen speichern"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "Bearbeiten Sie die CSS -Einstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "Lebenslauf -Stileinstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "Live -Vorschau"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "Beispieltitel"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "Dies ist ein Beispielabschnitt mit Beispielinhalt."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "Abschnitt_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "Schriftgröße"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "Farbe"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "Schriftgewicht"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "Abschnitt_CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "Vorschau speichern und anzeigen"



================================================
FILE: step13/__init__.py
================================================
from flask import Flask
from .models.models import db, Section
from .routes.admin_routes import admin_bp
from .routes.public_routes import public_bp
from .routes.main_routes import main_bp
from .extensions import babel  # هذا يجب أن يأتي بعد Flask
from .i18n_runtime import init_i18n
import os
from flask_babel import get_locale
from flask_babel import _


def create_app():
    app = Flask(__name__, instance_relative_config=True)
    app.config.from_object("step13.config.settings.Config")
    app.config['LANGUAGES'] = ['de', 'en', 'ar']
    app.debug = True

    import logging
    logging.basicConfig(level=logging.DEBUG)
    app.logger.setLevel(logging.DEBUG)

    # تأكد من وجود مجلد instance
    os.makedirs(app.instance_path, exist_ok=True)

    # تهيئة قواعد البيانات والإضافات
    db.init_app(app)

    translations_path = os.path.abspath(os.path.join(os.path.dirname(__file__), 'translations'))
    app.config['BABEL_TRANSLATION_DIRECTORIES'] = translations_path
    babel.init_app(app)

    app.register_blueprint(main_bp)
    app.register_blueprint(admin_bp)
    app.register_blueprint(public_bp)

    init_i18n(app)

    # ✅ إنشاء قاعدة البيانات تلقائيًا
    with app.app_context():
        db_path = os.path.join(app.instance_path, 'lebenslauf.db')
        if not os.path.exists(db_path):
            db.create_all()
            insert_initial_sections()

    @app.before_request
    def log_locale_info():
        print("🌐 Requested locale:", get_locale())
        print("📦 Babel directory:", app.config.get('BABEL_TRANSLATION_DIRECTORIES'))

    return app


def insert_initial_sections():
    """إدخال الأقسام الأساسية تلقائيًا"""
    default_sections = [
        "Summary", "Career Objective", "Experience", "Qualifications",
        "Skills", "Languages", "Projects", "Links", "Interests"
    ]
    for idx, title in enumerate(default_sections, start=1):
        print(f"➕ Adding section: {title}")
        section = Section(order=idx, title=title, content="")
        db.session.add(section)
    db.session.commit()
    print("✅ Sections inserted.")




================================================
FILE: step13/babel.cfg
================================================
[python: **.py]
[jinja2: **/templates/**.html]
extensions=jinja2.ext.do

ignore_dirs = venv



================================================
FILE: step13/extensions.py
================================================
# step11/extensions.py
from flask_babel import Babel

# ✅ أنشئ الكائن بدون باراميترات
babel = Babel()



================================================
FILE: step13/i18n_runtime.py
================================================
from flask import request
from flask_babel import gettext
from .extensions import babel

# ✅ دالة مستقلة يمكن استيرادها
def get_locale():
    lang = request.args.get("lang")
    print("📥 lang param:", lang)
    if lang in ['de', 'en', 'ar']:
        return lang
    return request.accept_languages.best_match(['de', 'en', 'ar'])

def init_i18n(app):
    # ✅ اربطها هنا
    babel.locale_selector_func = get_locale

    @app.context_processor
    def inject_get_locale():
        return dict(get_locale=get_locale)

    @app.context_processor
    def inject_translation():
        return dict(gettext=gettext)



================================================
FILE: step13/i18n_translate.py
================================================
import os
import re
import subprocess
from pathlib import Path
from flask import request
from deep_translator import GoogleTranslator
from .extensions import babel




# ----------- إعدادات المسارات ----------
STEP_DIR = Path(__file__).resolve().parent
BABEL_CFG = os.path.join(STEP_DIR, "babel.cfg")
OUTPUT_DIR = STEP_DIR / "translations"
POT_FILE = STEP_DIR / "messages.pot"
LANGUAGES = ["ar", "de"]

# ----------------------------------------


def fix_placeholders(msgid, translated):
    patterns = [
        re.compile(r"%\([^)]+\)s"),    # مثل %(name)s
        re.compile(r"\{[^}]+\}")       # مثل {value}
    ]
    for pattern in patterns:
        placeholders = pattern.findall(msgid)
        for ph in placeholders:
            corrupted_regex = re.compile(rf"%\s*\(\s*{re.escape(ph[2:-2])}\s*\)\s*s", re.IGNORECASE)
            translated = corrupted_regex.sub('', translated)
            if ph not in translated:
                print(f"⚠️ Missing placeholder {ph} in translation → fixing.")
                translated = translated.strip()
                if not translated.endswith(ph):
                    translated += f" {ph}"
    return translated


def read_pot_file(path):
    return path.read_text(encoding="utf-8").splitlines()


def init_translators(langs):
    return {lang: GoogleTranslator(source='en', target=lang) for lang in langs}


def add_po_header(lines, lang):
    header = [
        'msgid ""',
        'msgstr ""',
        '"Content-Type: text/plain; charset=UTF-8\\n"',
        f'"Language: {lang}\\n"',
        ""
    ]
    return header + lines


def is_english(text):
    return re.search(r'[a-zA-Z]', text) and not re.search(r'[ء-ي]', text)

def translate_lines(lines, translators):
    msgid = None
    translated_content = {lang: [] for lang in translators}

    for line in lines:
        if 'fuzzy' in line:
            continue
        if line.startswith('msgid '):
            msgid_raw = line[6:].strip().strip('"')
            if not is_english(msgid_raw):
                msgid = None
                for lang in translators:
                    translated_content[lang].append(line)
                    translated_content[lang].append('msgstr ""')
                continue
            msgid = msgid_raw
            msgid = line[6:].strip().strip('"')
            for lang in translators:
                translated_content[lang].append(line)
        elif line.strip() == 'msgstr ""' and msgid:
            for lang, translator in translators.items():
                try:
                    translated = translator.translate(msgid)
                    if not translated.strip():
                        print(f"Warning [{lang}] Empty translation for: {msgid}")
                    translated = fix_placeholders(msgid, translated)
                    translated_content[lang].append(f'msgstr "{translated}"')
                    print(f"Translated [{lang}] {msgid} → {translated}")
                except Exception as e:
                    translated_content[lang].append('msgstr ""')
                    print(f"Error [{lang}] translating '{msgid}': {e}")
            msgid = None
        else:
            for lang in translators:
                translated_content[lang].append(line)
    return translated_content


def save_translations(translated_content, base_output_dir):
    for lang, lines in translated_content.items():
        lines = add_po_header(lines, lang)
        path = Path(base_output_dir) / lang / "LC_MESSAGES" / "messages.po"
        path.parent.mkdir(parents=True, exist_ok=True)
        path.write_text("\n".join(lines), encoding="utf-8")
        print(f"Saved [{lang}] to {path}")


def generate_pot_file():
    print("Extracting phrases to .pot file ...")
    subprocess.run(["pybabel", "extract", "-F", BABEL_CFG, "-o", POT_FILE, STEP_DIR], check=True)


def init_po_files(languages):
    for lang in languages:
        po_path = Path(OUTPUT_DIR) / lang / "LC_MESSAGES" / "messages.po"
        if not po_path.exists():
            print(f"Initializing file for [{lang}] ...")
            subprocess.run(["pybabel", "init", "-i", POT_FILE, "-d", OUTPUT_DIR, "-l", lang], check=True)
        else:
            print(f"Translation file already exists for [{lang}]")


def compile_translations():
    try:
        subprocess.run(["pybabel", "compile", "-d", OUTPUT_DIR], check=True)
        print("✅ Compiled translations to .mo files.")
    except subprocess.CalledProcessError as e:
        print("❌ Error compiling .mo files:", e)


def main():
    generate_pot_file()
    init_po_files(LANGUAGES)

    if not Path(POT_FILE).exists():
        print(f"{POT_FILE} not found after extraction.")
        return

    lines = read_pot_file(Path(POT_FILE))
    translators = init_translators(LANGUAGES)
    translated_content = translate_lines(lines, translators)
    save_translations(translated_content, OUTPUT_DIR)
    compile_translations()

    if Path(POT_FILE).exists():
        Path(POT_FILE).unlink()
        print("🧹 Temporary messages.pot file deleted.")



if __name__ == "__main__":
    main()



================================================
FILE: step13/run.py
================================================
# step12/run.py

from step13 import create_app

app = create_app()

if __name__ == "__main__":
    app.run(
        host="0.0.0.0",   # أو "127.0.0.1" إذا أردت تشغيله محليًا فقط
        port=40513,       # يمكنك تغييره حسب ما يناسبك
        debug=True        # اجعلها False في الإنتاج
    )



================================================
FILE: step13/config/__init__.py
================================================



================================================
FILE: step13/config/settings.py
================================================
import os

class Config:
    # هذا هو المسار المركزي الموحد
    basedir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..'))
    db_path = os.path.join(basedir, 'instance', 'lebenslauf.db')

    SECRET_KEY = os.environ.get('SECRET_KEY', 'dev_key')
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + db_path
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = True



================================================
FILE: step13/logic/__init__.py
================================================



================================================
FILE: step13/logic/builder.py
================================================
import json
from ..models.models import Setting

def get_css_setting(key, default=""):
    setting = Setting.query.filter_by(key=key).first()
    if setting:
        try:
            css_dict = json.loads(setting.value.replace("'", '"'))
            return "; ".join(f"{k}: {v}" for k, v in css_dict.items())
        except:
            return default
    return default



================================================
FILE: step13/models/__init__.py
================================================



================================================
FILE: step13/models/models.py
================================================
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Section(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    order = db.Column(db.Integer, nullable=False) 
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=True)

class Setting(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    key = db.Column(db.String(100), unique=True, nullable=False)
    value = db.Column(db.Text, nullable=False)



================================================
FILE: step13/routes/__init__.py
================================================



================================================
FILE: step13/routes/admin_routes.py
================================================
from flask import Blueprint, render_template, request, redirect, url_for
from ..models.models import db, Section, Setting  

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

@admin_bp.route("/sections", methods=["GET", "POST"])
def manage_sections():
    if request.method == "POST":
        for section_id, content in request.form.items():
            section = Section.query.get(int(section_id))
            if section:
                section.content = content
        db.session.commit()
        return redirect(url_for("admin.manage_sections"))

    sections = Section.query.all()
    return render_template("admin/sections.html.j2", sections=sections)



import json

@admin_bp.route("/settings", methods=["GET", "POST"])
def manage_settings():
    error = None

    settings = Setting.query.all()  # نحتاجها لاحقًا داخل POST

    if request.method == "POST":
        try:
            # إعداد خاص لـ section_title_css من الحقول المرئية
            font_size = request.form.get("section_title_css_font_size")
            color = request.form.get("section_title_css_color")
            weight = request.form.get("section_title_css_weight")

            css_json = {
                "font-size": font_size,
                "color": color,
                "font-weight": weight
            }

            setting = Setting.query.filter_by(key="section_title_css").first()
            if setting:
                setting.value = json.dumps(css_json)

            # إعداد خاص لـ paragraph_css
            p_font_size = request.form.get("paragraph_css_font_size")
            p_color = request.form.get("paragraph_css_color")

            paragraph_css_json = {
                "font-size": p_font_size,
                "color": p_color
            }

            p_setting = Setting.query.filter_by(key="paragraph_css").first()
            if p_setting:
                p_setting.value = json.dumps(paragraph_css_json)

            # إعداد خاص لـ body_font
            body_font = request.form.get("body_font")
            b_setting = Setting.query.filter_by(key="body_font").first()
            if b_setting:
                b_setting.value = body_font

            # تجاهل الحقول المعالجة يدويًا
            skip_keys = [
                "section_title_css_font_size", "section_title_css_color", "section_title_css_weight",
                "paragraph_css_font_size", "paragraph_css_color",
                "body_font"
            ]

            for key, value in request.form.items():
                if key in skip_keys:
                    continue
                s = Setting.query.filter_by(key=key).first()
                if s:
                    json.loads(value.replace("'", '"'))
                    s.value = value

            db.session.commit()
            action = request.form.get("action")
            if action == "save_and_preview":
                return redirect(url_for("public.resume"))
            return redirect(url_for("admin.manage_settings"))


        except Exception as e:
            error = f"❌ Fehler im JSON-Format: {str(e)}"

    # إعدادات للعرض (GET)
    section_title_css_data = {
        "font-size": "20px",
        "color": "#000000",
        "font-weight": "normal"
    }

    paragraph_css_data = {
        "font-size": "14px",
        "color": "#444444"
    }

    body_font_value = "Arial, sans-serif"

    for s in settings:
        if s.key == "section_title_css":
            try:
                section_title_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "paragraph_css":
            try:
                paragraph_css_data = json.loads(s.value.replace("'", '"'))
            except:
                pass
        elif s.key == "body_font":
            body_font_value = s.value

    return render_template(
        "admin/settings.html.j2",
        settings=settings,
        error=error,
        section_title_css_data=section_title_css_data,
        paragraph_css_data=paragraph_css_data,
        body_font_value=body_font_value
    )



================================================
FILE: step13/routes/main_routes.py
================================================
from flask import Blueprint, request, render_template
from flask_babel import _
from flask_babel import force_locale
from ..i18n_runtime import get_locale

main_bp = Blueprint("main", __name__)


@main_bp.route("/")
def home():
    lang = get_locale()
    with force_locale(lang):
        print("🌐 Forced locale:", lang)
        return render_template("home.html.j2", test=_("Select language:"))



================================================
FILE: step13/routes/public_routes.py
================================================
from flask import Blueprint, render_template
from ..models.models import Section
from ..logic.builder import get_css_setting

public_bp = Blueprint("public", __name__)

@public_bp.route("/resume")
def resume():
    sections = Section.query.all()
    section_title_css = get_css_setting("section_title_css", "font-size: 20px; color: #000")
    paragraph_css = get_css_setting("paragraph_css", "font-size: 14px; color: #444")
    body_font = get_css_setting("body_font", "font-family: Arial, sans-serif")

    return render_template(
        "public/resume.html.j2",
        sections=sections,
        section_title_css=section_title_css,
        paragraph_css=paragraph_css,
        body_font=body_font
    )



================================================
FILE: step13/static/css/resume.css
================================================
body {
    margin: 40px;
    font-family: Arial, sans-serif;
}

.section-title {
    /* سيتم استبداله ديناميكيًا بالـ style="" لاحقًا */
    border-bottom: 1px solid #ccc;
    margin-top: 40px;
}

.section-content {
    white-space: pre-wrap;
    margin-top: 10px;
}



================================================
FILE: step13/templates/base.html.j2
================================================
<!DOCTYPE html>
<html lang="{{ get_locale() }}">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{{ _('Resume Project') }}{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/resume.css') }}">
</head>
<body style="{{ body_font | default('font-family: Arial, sans-serif;') }}">

    {% include 'partials/navbar.html.j2' %}

    <main style="padding: 20px;">
        {% block content %}{% endblock %}
    </main>

    {% include 'partials/footer.html.j2' %}

</body>
</html>



================================================
FILE: step13/templates/home.html.j2
================================================
{% extends 'base.html.j2' %}

{% block content %}
    <h1>✅ {{ _('Resume Project gestartet erfolgreich!') }}</h1>
    <p>{{ _('Welcome to your multilingual resume application.') }}</p>
{% endblock %}



================================================
FILE: step13/templates/admin/sections.html.j2
================================================
{% extends "base.html.j2" %}

{% block title %}{{ _('Manage Sections') }}{% endblock %}

{% block content %}
    <h1>📝 {{ _('Edit Resume Sections') }}</h1>
    <form method="POST">
        {% for section in sections %}
            <h3>{{ section.title }}</h3>
            <textarea name="{{ section.id }}" rows="4" cols="80">{{ section.content }}</textarea>
            <hr>
        {% endfor %}
        <button type="submit">💾 {{ _('Save Changes') }}</button>
    </form>
{% endblock %}



================================================
FILE: step13/templates/admin/settings.html.j2
================================================
{% extends "base.html.j2" %}

{% block title %}{{ _('Edit CSS Settings') }}{% endblock %}

{% block content %}
    <h1>🎨 {{ _('Resume Style Settings') }}</h1>

    {% if error %}
        <p style="color: red;">{{ error }}</p>
    {% endif %}

    <form method="POST">

        <hr>
        <h2>🔍 {{ _('Live Preview') }}</h2>

        <div id="preview-box" style="padding: 20px; border: 1px dashed #aaa;">
            <h2 id="preview-title">{{ _('Example Title') }}</h2>
            <p id="preview-paragraph">{{ _('This is a sample section with example content.') }}</p>
        </div>

        <!-- section_title_css -->
        <h3>{{ _('section_title_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="section_title_css_font_size">
            {% for size in ["16px", "18px", "20px", "22px", "24px"] %}
                <option value="{{ size }}" {% if section_title_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="section_title_css_color" value="{{ section_title_css_data['color'] }}">

        <br><br>

        <label>🔠 {{ _('Font Weight') }}:</label>
        <select name="section_title_css_weight">
            {% for w in ["normal", "bold", "lighter"] %}
                <option value="{{ w }}" {% if section_title_css_data["font-weight"] == w %}selected{% endif %}>{{ w.capitalize() }}</option>
            {% endfor %}
        </select>

        <hr>

        <!-- paragraph_css -->
        <h3>{{ _('paragraph_css') }}</h3>

        <label>📏 {{ _('Font Size') }}:</label>
        <select name="paragraph_css_font_size">
            {% for size in ["12px", "14px", "16px", "18px", "20px"] %}
                <option value="{{ size }}" {% if paragraph_css_data["font-size"] == size %}selected{% endif %}>{{ size }}</option>
            {% endfor %}
        </select>

        <br><br>

        <label>🎨 {{ _('Color') }}:</label>
        <input type="color" name="paragraph_css_color" value="{{ paragraph_css_data['color'] }}">

        <hr>

        <!-- Other settings -->
        {% for setting in settings %}
            {% if setting.key != "section_title_css" and setting.key != "paragraph_css" %}
                <h3>{{ _(setting.key) }}</h3>
                <textarea name="{{ setting.key }}" rows="4" cols="80">{{ setting.value }}</textarea>
                <hr>
            {% endif %}
        {% endfor %}

        <button type="submit" name="action" value="save">💾 {{ _('Save Changes') }}</button>
        <button type="submit" name="action" value="save_and_preview">💾 {{ _('Save & Show Preview') }}</button>

    </form>

    <script>
    function updatePreview() {
        const title = document.getElementById("preview-title");
        const titleFontSize = document.querySelector("select[name='section_title_css_font_size']");
        const titleColor = document.querySelector("input[name='section_title_css_color']");
        const titleWeight = document.querySelector("select[name='section_title_css_weight']");
        if (title && titleFontSize && titleColor && titleWeight) {
            title.style.fontSize = titleFontSize.value;
            title.style.color = titleColor.value;
            title.style.fontWeight = titleWeight.value;
        }

        const para = document.getElementById("preview-paragraph");
        const paraFontSize = document.querySelector("select[name='paragraph_css_font_size']");
        const paraColor = document.querySelector("input[name='paragraph_css_color']");
        if (para && paraFontSize && paraColor) {
            para.style.fontSize = paraFontSize.value;
            para.style.color = paraColor.value;
        }

        const bodyFont = document.querySelector("select[name='body_font']");
        const previewBox = document.getElementById("preview-box");
        if (bodyFont && previewBox) {
            previewBox.style.fontFamily = bodyFont.value;
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        document.querySelectorAll("select, input[type='color']").forEach(el => {
            el.addEventListener("input", updatePreview);
        });
        updatePreview();
    });
    </script>
{% endblock %}



================================================
FILE: step13/templates/partials/footer.html.j2
================================================
<footer style="background: #eee; text-align: center; padding: 20px; margin-top: 40px; font-size: 14px;">
    © 2025 lebenslauf | {{ _('All rights reserved.') }}
</footer>



================================================
FILE: step13/templates/partials/navbar.html.j2
================================================
<nav style="background: #333; color: white; padding: 10px 20px;">
    <a href="{{ url_for('main.home') }}" style="color: white; margin-right: 20px;">🏠 {{ _('Home') }}</a>
    <a href="{{ url_for('admin.manage_sections') }}" style="color: white; margin-right: 20px;">📝 {{ _('Sections') }}</a>
    <a href="{{ url_for('admin.manage_settings') }}" style="color: white; margin-right: 20px;">🎨 {{ _('Settings') }}</a>
    <a href="{{ url_for('public.resume') }}" style="color: white; margin-right: 20px;">📄 {{ _('Resume') }}</a>

    <span style="float: right;">
        <a href="?lang=ar" style="color: white; margin-left: 10px;">🇸🇦</a>
        <a href="?lang=en" style="color: white; margin-left: 10px;">🇺🇸</a>
        <a href="?lang=de" style="color: white; margin-left: 10px;">🇩🇪</a>
    </span>
</nav>



================================================
FILE: step13/templates/public/resume.html.j2
================================================
{% extends "base.html.j2" %}

{% block title %}{{ _('Resume') }}{% endblock %}

{% block content %}
    <h1>📄 {{ _('My Resume') }}</h1>

    {% for section in sections %}
        <h2 class="section-title" style="{{ section_title_css }}">{{ _(section.title) }}</h2>
        <div class="section-content" style="{{ paragraph_css }}">{{ _(section.content) }}</div>
    {% endfor %}
{% endblock %}



================================================
FILE: step13/tools/init_db.py
================================================
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from __init__ import create_app

from models.models import db, Section, Setting

app = create_app()

with app.app_context():
    db.drop_all()
    db.create_all()

    # إدخال بيانات أولية
    sections = [
        "Profil", "Karriereziel", "Bevorzugte Bereiche",
        "Berufserfahrung", "Qualifikationen", "Technische Fähigkeiten",
        "Sprachen", "Projekte", "Links", "Interessen"
    ]

    for title in sections:
        db.session.add(Section(title=title, content=""))

    db.session.add(Setting(key="section_title_css", value="{'font-size': '18px', 'color': '#000'}"))
    db.session.commit()

    print("✅ Datenbank initialisiert und mit Beispieldaten gefüllt.")



================================================
FILE: step13/translations/ar/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: ar\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "حدد اللغة:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "استئناف المشروع"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "استئناف مشروع الجستارت erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "مرحبًا بك في تطبيق السيرة الذاتية متعددة اللغات."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "إدارة الأقسام"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "تحرير الأقسام السيرة الذاتية"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "حفظ التغييرات"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "تحرير إعدادات CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "استئناف إعدادات النمط"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "معاينة حية"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "مثال العنوان"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "هذا قسم عينة مع مثال محتوى."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "section_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "حجم الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "لون"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "وزن الخط"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "الفقرة"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "معاينة حفظ وإظهار"



================================================
FILE: step13/translations/de/LC_MESSAGES/messages.po
================================================
msgid ""
msgstr ""
"Content-Type: text/plain; charset=UTF-8\n"
"Language: de\n"

# Translations template for PROJECT.
# Copyright (C) 2025 ORGANIZATION
# This file is distributed under the same license as the PROJECT project.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
msgid ""
msgstr ""
msgstr ""
"Project-Id-Version: PROJECT VERSION\n"
"Report-Msgid-Bugs-To: EMAIL@ADDRESS\n"
"POT-Creation-Date: 2025-06-08 02:52+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: M:/lebenslauf/step11/routes/main_routes.py:14
#: M:/lebenslauf/step11/templates/home.html:12
#: M:/lebenslauf/step11/templates/home.html:16
msgid "Select language:"
msgstr "Sprache auswählen:"

#: M:/lebenslauf/step11/templates/home.html:5
msgid "Resume Project"
msgstr "Projekt wieder aufnehmen"

#: M:/lebenslauf/step11/templates/home.html:8
msgid "Resume Project gestartet erfolgreich!"
msgstr "Lebenslauf Projekt Gestartett Erfolgreich!"

#: M:/lebenslauf/step11/templates/home.html:9
msgid "Welcome to your multilingual resume application."
msgstr "Willkommen bei Ihrer mehrsprachigen Lebenslaufanwendung."

#: M:/lebenslauf/step11/templates/admin/sections.html:5
msgid "Manage Sections"
msgstr "Abschnitte verwalten"

#: M:/lebenslauf/step11/templates/admin/sections.html:8
msgid "Edit Resume Sections"
msgstr "Lebenslaufabschnitte bearbeiten"

#: M:/lebenslauf/step11/templates/admin/sections.html:15
#: M:/lebenslauf/step11/templates/admin/settings.html:76
msgid "Save Changes"
msgstr "Änderungen speichern"

#: M:/lebenslauf/step11/templates/admin/settings.html:5
msgid "Edit CSS Settings"
msgstr "Bearbeiten Sie die CSS -Einstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:8
msgid "Resume Style Settings"
msgstr "Lebenslauf -Stileinstellungen"

#: M:/lebenslauf/step11/templates/admin/settings.html:17
msgid "Live Preview"
msgstr "Live -Vorschau"

#: M:/lebenslauf/step11/templates/admin/settings.html:20
msgid "Example Title"
msgstr "Beispieltitel"

#: M:/lebenslauf/step11/templates/admin/settings.html:21
msgid "This is a sample section with example content."
msgstr "Dies ist ein Beispielabschnitt mit Beispielinhalt."

#: M:/lebenslauf/step11/templates/admin/settings.html:25
msgid "section_title_css"
msgstr "Abschnitt_title_css"

#: M:/lebenslauf/step11/templates/admin/settings.html:27
#: M:/lebenslauf/step11/templates/admin/settings.html:53
msgid "Font Size"
msgstr "Schriftgröße"

#: M:/lebenslauf/step11/templates/admin/settings.html:36
#: M:/lebenslauf/step11/templates/admin/settings.html:62
msgid "Color"
msgstr "Farbe"

#: M:/lebenslauf/step11/templates/admin/settings.html:41
msgid "Font Weight"
msgstr "Schriftgewicht"

#: M:/lebenslauf/step11/templates/admin/settings.html:51
msgid "paragraph_css"
msgstr "Abschnitt_CSS"

#: M:/lebenslauf/step11/templates/admin/settings.html:77
msgid "Save & Show Preview"
msgstr "Vorschau speichern und anzeigen"


